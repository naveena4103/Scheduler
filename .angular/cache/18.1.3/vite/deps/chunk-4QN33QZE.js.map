{
  "version": 3,
  "sources": ["../../../../../node_modules/@angular/material/fesm2020/badge.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n  constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._ariaDescriber = _ariaDescriber;\n    this._renderer = _renderer;\n    this._animationMode = _animationMode;\n    this._color = 'primary';\n    this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    this.position = 'above after';\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    this.size = 'medium';\n    /** Unique id for the badge */\n    this._id = nextId++;\n    /** Whether the OnInit lifecycle hook has run yet */\n    this._isInitialized = false;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const nativeElement = _elementRef.nativeElement;\n      if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n        throw Error('matBadge must be attached to an element node.');\n      }\n    }\n  }\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  get color() {\n    return this._color;\n  }\n  set color(value) {\n    this._setColor(value);\n    this._color = value;\n  }\n  /** Whether the badge should overlap its contents or not */\n  get overlap() {\n    return this._overlap;\n  }\n  set overlap(val) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  /** The content for the badge */\n  get content() {\n    return this._content;\n  }\n  set content(newContent) {\n    this._updateRenderedContent(newContent);\n  }\n  /** Message used to describe the decorated element via aria-describedby */\n  get description() {\n    return this._description;\n  }\n  set description(newDescription) {\n    this._updateHostAriaDescription(newDescription);\n  }\n  /** Whether the badge is hidden. */\n  get hidden() {\n    return this._hidden;\n  }\n  set hidden(val) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  /** Whether the badge is above the host or not */\n  isAbove() {\n    return this.position.indexOf('below') === -1;\n  }\n  /** Whether the badge is after the host or not */\n  isAfter() {\n    return this.position.indexOf('before') === -1;\n  }\n  /**\n   * Gets the element into which the badge's content is being rendered. Undefined if the element\n   * hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement() {\n    return this._badgeElement;\n  }\n  ngOnInit() {\n    // We may have server-side rendered badge that we need to clear.\n    // We need to do this in ngOnInit because the full content of the component\n    // on which the badge is attached won't necessarily be in the DOM until this point.\n    this._clearExistingBadges();\n    if (this.content && !this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n      this._updateRenderedContent(this.content);\n    }\n    this._isInitialized = true;\n  }\n  ngOnDestroy() {\n    // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n    // We have to destroy it ourselves, otherwise it'll be retained in memory.\n    if (this._renderer.destroyNode) {\n      this._renderer.destroyNode(this._badgeElement);\n    }\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n  }\n  /** Creates the badge element */\n  _createBadgeElement() {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    // The badge is aria-hidden because we don't want it to appear in the page's navigation\n    // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n    badgeElement.setAttribute('aria-hidden', 'true');\n    badgeElement.classList.add(BADGE_CONTENT_CLASS);\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n    this._elementRef.nativeElement.appendChild(badgeElement);\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n    return badgeElement;\n  }\n  /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n  _updateRenderedContent(newContent) {\n    const newContentNormalized = `${newContent ?? ''}`.trim();\n    // Don't create the badge element if the directive isn't initialized because we want to\n    // append the badge element to the *end* of the host element's content for backwards\n    // compatibility.\n    if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    }\n    if (this._badgeElement) {\n      this._badgeElement.textContent = newContentNormalized;\n    }\n    this._content = newContentNormalized;\n  }\n  /** Updates the host element's aria description via AriaDescriber. */\n  _updateHostAriaDescription(newDescription) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    if (newDescription) {\n      this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n    }\n    this._description = newDescription;\n  }\n  /** Adds css theme class given the color to the component host */\n  _setColor(colorPalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-badge-${this._color}`);\n    if (colorPalette) {\n      classList.add(`mat-badge-${colorPalette}`);\n    }\n  }\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  _clearExistingBadges() {\n    // Only check direct children of this host element in order to avoid deleting\n    // any badges that might exist in descendant elements.\n    const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n    for (const badgeElement of Array.from(badges)) {\n      if (badgeElement !== this._badgeElement) {\n        badgeElement.remove();\n      }\n    }\n  }\n}\nMatBadge.ɵfac = function MatBadge_Factory(ɵt) {\n  return new (ɵt || MatBadge)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.AriaDescriber), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\nMatBadge.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatBadge,\n  selectors: [[\"\", \"matBadge\", \"\"]],\n  hostAttrs: [1, \"mat-badge\"],\n  hostVars: 20,\n  hostBindings: function MatBadge_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx.content)(\"mat-badge-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: [0, \"matBadgeDisabled\", \"disabled\"],\n    color: [0, \"matBadgeColor\", \"color\"],\n    overlap: [0, \"matBadgeOverlap\", \"overlap\"],\n    position: [0, \"matBadgePosition\", \"position\"],\n    content: [0, \"matBadge\", \"content\"],\n    description: [0, \"matBadgeDescription\", \"description\"],\n    size: [0, \"matBadgeSize\", \"size\"],\n    hidden: [0, \"matBadgeHidden\", \"hidden\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      inputs: ['disabled: matBadgeDisabled'],\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !content',\n        '[class.mat-badge-disabled]': 'disabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.AriaDescriber\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: ['matBadgeOverlap']\n    }],\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    hidden: [{\n      type: Input,\n      args: ['matBadgeHidden']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(ɵt) {\n  return new (ɵt || MatBadgeModule)();\n};\nMatBadgeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatBadgeModule,\n  declarations: [MatBadge],\n  imports: [A11yModule, MatCommonModule],\n  exports: [MatBadge, MatCommonModule]\n});\nMatBadgeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[A11yModule, MatCommonModule], MatCommonModule]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, MatCommonModule],\n      exports: [MatBadge, MatCommonModule],\n      declarations: [MatBadge]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],
  "mappings": "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",
  "names": []
}
