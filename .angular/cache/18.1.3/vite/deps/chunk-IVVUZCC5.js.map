{
  "version": 3,
  "sources": ["../../../../../node_modules/@angular/material/fesm2020/progress-spinner.mjs"],
  "sourcesContent": ["import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const svg_r2 = i0.ɵɵreference(1);\n    i0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\")(\"transform-origin\", ctx_r0._getCircleTransformOrigin(svg_r2));\n    i0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n  }\n}\nfunction MatProgressSpinner__svg_circle_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const svg_r2 = i0.ɵɵreference(1);\n    i0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\")(\"transform-origin\", ctx_r0._getCircleTransformOrigin(svg_r2));\n    i0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n  }\n}\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    diameter: BASE_SIZE\n  };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\n  constructor(elementRef, _platform, _document, animationMode, defaults,\n  /**\n   * @deprecated `changeDetectorRef`, `viewportRuler` and `ngZone`\n   * parameters to become required.\n   * @breaking-change 14.0.0\n   */\n  changeDetectorRef, viewportRuler, ngZone) {\n    super(elementRef);\n    this._document = _document;\n    this._diameter = BASE_SIZE;\n    this._value = 0;\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Mode of the progress circle */\n    this.mode = 'determinate';\n    const trackedDiameters = MatProgressSpinner._diameters;\n    this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n    }\n    this._noopAnimations = animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n    if (elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner') {\n      this.mode = 'indeterminate';\n    }\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n    // Safari has an issue where the circle isn't positioned correctly when the page has a\n    // different zoom level from the default. This handler triggers a recalculation of the\n    // `transform-origin` when the page zoom level changes.\n    // See `_getCircleTransformOrigin` for more info.\n    // @breaking-change 14.0.0 Remove null checks for `_changeDetectorRef`,\n    // `viewportRuler` and `ngZone`.\n    if (_platform.isBrowser && _platform.SAFARI && viewportRuler && changeDetectorRef && ngZone) {\n      this._resizeSubscription = viewportRuler.change(150).subscribe(() => {\n        // When the window is resize while the spinner is in `indeterminate` mode, we\n        // have to mark for check so the transform origin of the circle can be recomputed.\n        if (this.mode === 'indeterminate') {\n          ngZone.run(() => changeDetectorRef.markForCheck());\n        }\n      });\n    }\n  }\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  get diameter() {\n    return this._diameter;\n  }\n  set diameter(size) {\n    this._diameter = coerceNumberProperty(size);\n    this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n  /** Stroke width of the progress spinner. */\n  get strokeWidth() {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n  /** Value of the progress circle. */\n  get value() {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element) || this._document.head;\n    this._attachStyleNode();\n    element.classList.add('mat-progress-spinner-indeterminate-animation');\n  }\n  ngOnDestroy() {\n    this._resizeSubscription.unsubscribe();\n  }\n  /** The radius of the spinner, adjusted for stroke width. */\n  _getCircleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n  /** The view box of the spinner's svg element. */\n  _getViewBox() {\n    const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n  /** The stroke circumference of the svg circle. */\n  _getStrokeCircumference() {\n    return 2 * Math.PI * this._getCircleRadius();\n  }\n  /** The dash offset of the svg circle. */\n  _getStrokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._getStrokeCircumference() * (100 - this._value) / 100;\n    }\n    return null;\n  }\n  /** Stroke width of the circle in percent. */\n  _getCircleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n  /** Gets the `transform-origin` for the inner circle element. */\n  _getCircleTransformOrigin(svg) {\n    // Safari has an issue where the `transform-origin` doesn't work as expected when the page\n    // has a different zoom level from the default. The problem appears to be that a zoom\n    // is applied on the `svg` node itself. We can work around it by calculating the origin\n    // based on the zoom level. On all other browsers the `currentScale` appears to always be 1.\n    const scale = (svg.currentScale ?? 1) * 50;\n    return `${scale}% ${scale}%`;\n  }\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  _attachStyleNode() {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n      if (!diametersForElement) {\n        diametersForElement = new Set();\n        diameters.set(styleRoot, diametersForElement);\n      }\n      diametersForElement.add(currentDiameter);\n    }\n  }\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  _getAnimationText() {\n    const strokeCircumference = this._getStrokeCircumference();\n    return INDETERMINATE_ANIMATION_TEMPLATE\n    // Animation should begin at 5% and end at 80%\n    .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`).replace(/END_VALUE/g, `${0.2 * strokeCircumference}`).replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\n  }\n  /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n  _getSpinnerAnimationLabel() {\n    // The string of a float point number will include a period ‘.’ character,\n    // which is not valid for a CSS animation-name.\n    return this.diameter.toString().replace('.', '_');\n  }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(ɵt) {\n  return new (ɵt || MatProgressSpinner)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.ViewportRuler), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nMatProgressSpinner.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatProgressSpinner,\n  selectors: [[\"mat-progress-spinner\"], [\"mat-spinner\"]],\n  hostAttrs: [\"role\", \"progressbar\", \"tabindex\", \"-1\", 1, \"mat-progress-spinner\", \"mat-spinner\"],\n  hostVars: 10,\n  hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n      i0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      i0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    diameter: \"diameter\",\n    strokeWidth: \"strokeWidth\",\n    mode: \"mode\",\n    value: \"value\"\n  },\n  exportAs: [\"matProgressSpinner\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 8,\n  consts: [[\"svg\", \"\"], [\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", \"transform-origin\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", \"transform-origin\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n  template: function MatProgressSpinner_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"svg\", 1, 0);\n      i0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 11, \"circle\", 2)(3, MatProgressSpinner__svg_circle_3_Template, 1, 9, \"circle\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      i0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n      i0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngSwitchCase\", true);\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  dependencies: [i3.NgSwitch, i3.NgSwitchCase],\n  styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatProgressSpinner, [{\n    type: Component,\n    args: [{\n      selector: 'mat-progress-spinner, mat-spinner',\n      exportAs: 'matProgressSpinner',\n      host: {\n        'role': 'progressbar',\n        // `mat-spinner` is here for backward compatibility.\n        'class': 'mat-progress-spinner mat-spinner',\n        // set tab index to -1 so screen readers will read the aria-label\n        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n        'tabindex': '-1',\n        '[class._mat-animation-noopable]': `_noopAnimations`,\n        '[style.width.px]': 'diameter',\n        '[style.height.px]': 'diameter',\n        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n        '[attr.mode]': 'mode'\n      },\n      inputs: ['color'],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\",\n      styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2.ViewportRuler\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    diameter: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    mode: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {}\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(ɵt) {\n  return new (ɵt || MatProgressSpinnerModule)();\n};\nMatProgressSpinnerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatProgressSpinnerModule,\n  declarations: [MatProgressSpinner],\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatProgressSpinner, MatCommonModule]\n});\nMatProgressSpinnerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[MatCommonModule, CommonModule], MatCommonModule]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, CommonModule],\n      exports: [MatProgressSpinner, MatCommonModule],\n      declarations: [MatProgressSpinner]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Import `MatProgressSpinner` instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 8.0.0\n */\n// tslint:disable-next-line:variable-name\nconst MatSpinner = MatProgressSpinner;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n"],
  "mappings": "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",
  "names": []
}
