import { ChangeDetectorRef, EventEmitter, OnInit, SimpleChanges, OnDestroy } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { Column, ConfigOptions } from './interfaces';
import { DynamictableFilterService, DynamictableScrollerService } from './dynamictable.service';
import { MatSnackBar, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition } from '@angular/material/snack-bar';
import * as i0 from "@angular/core";
export declare class DynamictableComponent implements OnInit, OnDestroy {
    private _snackBar;
    private changeDetectorRefs;
    private dynamictableFilterService;
    private domSanitizer;
    private dynamictableScrollerService;
    horizontalPosition: MatSnackBarHorizontalPosition;
    verticalPosition: MatSnackBarVerticalPosition;
    spans: any[];
    selectedRows: any[];
    displayedColumns: Column[];
    expandedElement: any | null;
    columnsToDisplay: string[];
    opened: boolean;
    lastScrollLeft: number;
    stickyColumns: string[];
    stickyEndColumns: string[];
    selectedRowIndex: number;
    reverseSortColumns: any;
    selection: any;
    paginator: MatPaginator;
    sort: MatSort;
    set configOptions(configOptions: ConfigOptions);
    get configOptions(): ConfigOptions;
    set dataSource(dataSource: MatTableDataSource<any>);
    get dataSource(): MatTableDataSource<any>;
    private _configOptions;
    private _dataSource;
    fetchDataCallback: EventEmitter<any>;
    rowLevelActionHandler: EventEmitter<any>;
    cellClickActionHandler: EventEmitter<any>;
    onConfigOptionsChange: EventEmitter<any>;
    onToggleChangeHandler: EventEmitter<any>;
    onSelectButtonToggle: EventEmitter<any>;
    visibleColumns: any[];
    subscription: any;
    scrollSubscription: any;
    scrollTop: any;
    constructor(_snackBar: MatSnackBar, changeDetectorRefs: ChangeDetectorRef, dynamictableFilterService: DynamictableFilterService, domSanitizer: DomSanitizer, dynamictableScrollerService: DynamictableScrollerService);
    resetConfigOptions(): void;
    highlight(row: any): void;
    ngOnInit(): void;
    sortData(): (items: any, sort: MatSort) => any;
    ngOnChanges(changes: SimpleChanges): void;
    handleEvent(event: any): void;
    triggerUndoExecution(event: any): void;
    triggerRedoExecution(event: any): void;
    isGrouped(columnId: string): boolean;
    isArray(object: any): boolean;
    expandRowsForMultiValuedCols(colId: string): any[];
    mergeRowsForMultiValuedCols(colId: string): any[];
    addGroup(item: any, event?: Event, externalTrigger?: boolean | false): void;
    removeGroup(item: any, event?: Event, externalTrigger?: boolean | false): void;
    optionClicked(event: Event, item: any): void;
    onTableScroll(event: any): void;
    onRowLevelActionClick(action: any, event: any, subMenu?: string): void;
    onRowLevelActionIconClick(action: any, event: any): void;
    customWhen: (index: any) => boolean | undefined;
    setColumnsToDisplay(): void;
    groupAndSort(data: any[]): void;
    groupBy(arr: any[], key: string): any;
    cacheSpan(key: string, groupLevel?: number): void;
    getRowSpan(col: string, index: number): any;
    getRowSpanDisplay(col: string, index: number): string;
    getColumnByID(colId: string): Column | undefined;
    openSnackBar(message: string): void;
    toggleColumnVisibility(isVisible: boolean, colId: string, externalTrigger?: boolean | false): void;
    hideColumn(columnId: string): void;
    showColumn(event: Event, column: any): void;
    drop(event: CdkDragDrop<string[]>): void;
    reOrderColumns(columnName: string, movePosition: string | 'left' | 'right' | 'end' | 'index' | 'original'): void;
    moveLeft(columnName: string): void;
    moveRight(columnName: string): void;
    isSticky(stickyColumns: string[], id: string): boolean;
    isStickyEnd(stickyEndColumns: string[], id: string): boolean;
    stick(columnName: string): void;
    stickToEnd(columnName: string): void;
    unstick(columnName: string): void;
    unstickEnd(columnName: string): void;
    /** Whether the number of selected elements matches the total number of rows. */
    isAllSelected(): boolean;
    /** Selects all rows if they are not all selected; otherwise clear selection. */
    masterToggle(): void;
    /** The label for the checkbox on the passed row */
    checkboxLabel(row?: any): string;
    toggleRowSelect(row: any): void;
    onCellClick(row: any, columnId: any, controlType: any, element?: null): void;
    onMenuButtonClick(row: any, columnId: any, option: any): void;
    resetTableScroll(): void;
    repaintTable(): void;
    ngAfterViewInit(): void;
    evaluateCondition(rowData: any, item?: any): any;
    getConditionalStyles(existingStyles: any, rowData: any, column: Column): any;
    evaluateExpression(rowData: any, column: Column): {};
    getDisplayValues(value: string, separator?: string): string[];
    getDisplayType(element: any, column: any, value: any): any;
    onToggleChange(event: any): void;
    scrollToTop(): void;
    ngOnDestroy(): void;
    resetSelection(): void;
    onValChange(element: any, val: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DynamictableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DynamictableComponent, "cwp-dynamictable", never, { "configOptions": "configOptions"; "dataSource": "dataSource"; }, { "fetchDataCallback": "fetchDataCallback"; "rowLevelActionHandler": "rowLevelActionHandler"; "cellClickActionHandler": "cellClickActionHandler"; "onConfigOptionsChange": "onConfigOptionsChange"; "onToggleChangeHandler": "onToggleChangeHandler"; "onSelectButtonToggle": "onSelectButtonToggle"; }, never, never>;
}
