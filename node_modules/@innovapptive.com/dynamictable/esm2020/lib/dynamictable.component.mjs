import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { SelectionModel } from '@angular/cdk/collections';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { Constants } from './constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/snack-bar";
import * as i2 from "./dynamictable.service";
import * as i3 from "@angular/platform-browser";
import * as i4 from "./table-filter-panel/table-filter-panel.component";
import * as i5 from "@angular/material/table";
import * as i6 from "@angular/material/checkbox";
import * as i7 from "@angular/material/sort";
import * as i8 from "@angular/material/button";
import * as i9 from "@angular/material/icon";
import * as i10 from "@angular/material/menu";
import * as i11 from "@angular/material/slide-toggle";
import * as i12 from "@angular/material/button-toggle";
import * as i13 from "@angular/material/paginator";
import * as i14 from "@angular/common";
import * as i15 from "@angular/cdk/drag-drop";
import * as i16 from "@angular/material/tooltip";
import * as i17 from "./dynamic-type-pipe/dynamic-type-pipe";
export class DynamictableComponent {
    constructor(_snackBar, changeDetectorRefs, dynamictableFilterService, domSanitizer, dynamictableScrollerService) {
        this._snackBar = _snackBar;
        this.changeDetectorRefs = changeDetectorRefs;
        this.dynamictableFilterService = dynamictableFilterService;
        this.domSanitizer = domSanitizer;
        this.dynamictableScrollerService = dynamictableScrollerService;
        this.horizontalPosition = 'center';
        this.verticalPosition = 'top';
        this.spans = [];
        this.selectedRows = [];
        this.opened = false;
        this.lastScrollLeft = 0;
        this.stickyColumns = [];
        this.stickyEndColumns = [];
        this.selectedRowIndex = -1;
        this.reverseSortColumns = {};
        this.fetchDataCallback = new EventEmitter();
        this.rowLevelActionHandler = new EventEmitter();
        this.cellClickActionHandler = new EventEmitter();
        this.onConfigOptionsChange = new EventEmitter();
        this.onToggleChangeHandler = new EventEmitter();
        this.onSelectButtonToggle = new EventEmitter();
        this.visibleColumns = new Array();
        this.customWhen = (index) => {
            return this.configOptions.rowsExpandable;
        };
    }
    set configOptions(configOptions) {
        this._configOptions = configOptions
            ? { ...configOptions }
            : {};
    }
    get configOptions() {
        return this._configOptions;
    }
    set dataSource(dataSource) {
        this._dataSource = dataSource
            ? dataSource
            : {};
        this.dataSource.paginator = this.paginator;
        this.selectedRows = this.dataSource?.data.filter((data) => data?.isSelected);
    }
    get dataSource() {
        return this._dataSource;
    }
    resetConfigOptions() {
        this.configOptions = { ...this.configOptions };
        this.setColumnsToDisplay();
        this.visibleColumns = this.configOptions.allColumns.filter((column) => column['visible']);
        this.configOptions.groupByColumns.forEach((column) => {
            this.reOrderColumns(column, 'index');
            this.setColumnsToDisplay();
            this.stick(column);
            this.displayedColumns.forEach((column) => {
                if (column.id == column) {
                    column.sticky = true;
                }
            });
        });
    }
    highlight(row) {
        this.selectedRowIndex = row.id;
    }
    ngOnInit() {
        this.selection = new SelectionModel(true, this.selectedRows);
        this.resetConfigOptions();
        this.subscription = this.dynamictableFilterService
            .getEventEmitter()
            .subscribe((eventData) => this.handleEvent(eventData));
        this.scrollSubscription = this.dynamictableScrollerService
            .getEventEmitter()
            .subscribe(() => {
            this.scrollToTop();
        });
        this.dataSource.sortingDataAccessor = (data, sortHeaderId) => {
            const configInfo = this.configOptions.allColumns.filter((item) => item.id === sortHeaderId);
            if (data[sortHeaderId] === null || data[sortHeaderId] === undefined)
                if (configInfo.type === 'string') {
                    return '';
                }
                else if (configInfo.type === 'number') {
                    return 0;
                }
            if (configInfo.type === 'string') {
                return data[sortHeaderId].toLowerCase();
            }
            else {
                return data[sortHeaderId];
            }
        };
        this.configOptions.allColumns.map((col) => {
            if (col.reverseSort) {
                this.reverseSortColumns[col.id] = 1;
            }
        });
        this.dataSource.sortData = this.sortData();
    }
    sortData() {
        let sortFunction = (items, sort) => {
            if (!sort.active || sort.direction === '') {
                return items;
            }
            return items.sort((a, b) => {
                let comparatorResult = 0;
                const dateTimeRegex = /^(\w{3}\s\d{1,2},\s\d{2,4})\s(\d{1,2}:\d{2}\s[APap][Mm])$/;
                const dateRangeRegex = /^(\w{3} \d{1,2}, \d{2,4}) - (\w{3} \d{1,2}, \d{2,4})$/;
                const column = sort.active;
                if (a[column] === null ||
                    a[column] === undefined ||
                    a[column] === '_ _' ||
                    a[column].length === 0)
                    return 1;
                if (b[column] === null ||
                    b[column] === undefined ||
                    b[column] === '_ _' ||
                    b[column].length === 0)
                    return -1;
                if (typeof a[column] === 'number' && typeof b[column] === 'number') {
                    if (this.reverseSortColumns[column]) {
                        comparatorResult = b[column] - a[column];
                    }
                    else {
                        comparatorResult = a[column] - b[column];
                    }
                    return comparatorResult * (sort.direction == 'asc' ? 1 : -1);
                }
                else if (typeof a[column] === 'number') {
                    return -1;
                }
                else if (typeof b[column] === 'number') {
                    return 1;
                }
                else if (dateRangeRegex.test(a[column]) &&
                    dateRangeRegex.test(b[column])) {
                    const date1 = new Date(a[column].split('-')[0].trim()).getTime();
                    const date2 = new Date(b[column].split('-')[0].trim()).getTime();
                    if (this.reverseSortColumns[column]) {
                        comparatorResult = date2 - date1;
                    }
                    else {
                        comparatorResult = date1 - date2;
                    }
                    return comparatorResult * (sort.direction == 'asc' ? 1 : -1);
                }
                else if (dateTimeRegex.test(a[column]) &&
                    dateTimeRegex.test(b[column])) {
                    const date1 = new Date(a[column]).getTime();
                    const date2 = new Date(b[column]).getTime();
                    if (this.reverseSortColumns[column]) {
                        comparatorResult = date2 - date1;
                    }
                    else {
                        comparatorResult = date1 - date2;
                    }
                    return comparatorResult * (sort.direction == 'asc' ? 1 : -1);
                }
                else if (Array.isArray(a[column]) && Array.isArray(b[column])) {
                    if (this.reverseSortColumns[column]) {
                        comparatorResult = b[column][0].localeCompare(a[column][0]);
                    }
                    else {
                        comparatorResult = a[column][0].localeCompare(b[column][0]);
                    }
                    return comparatorResult * (sort.direction == 'asc' ? 1 : -1);
                }
                else {
                    if (this.reverseSortColumns[column]) {
                        comparatorResult = b[column].localeCompare(a[column]);
                    }
                    else {
                        comparatorResult = a[column].localeCompare(b[column]);
                    }
                    return comparatorResult * (sort.direction == 'asc' ? 1 : -1);
                }
            });
        };
        return sortFunction;
    }
    ngOnChanges(changes) {
        if (changes &&
            changes['dataSource'] &&
            !changes['dataSource'].firstChange) {
            if (changes['dataSource']['currentValue'].data <
                changes['dataSource']['previousValue'].data) {
                this.resetTableScroll();
            }
            // mergeRows for newly concatenated rows
            const groupedCols = [];
            this.configOptions.allColumns.forEach((col) => {
                if (col.reverseSort)
                    this.reverseSortColumns[col.id] = 1;
                const groupByCols = this.configOptions.groupByColumns;
                const index = groupByCols.indexOf(col.id);
                if (index > -1) {
                    groupedCols.push(col);
                }
            });
            if (groupedCols.length) {
                groupedCols.forEach((col) => {
                    if (col.isMultiValued) {
                        this.dataSource.data = this.expandRowsForMultiValuedCols(col.id);
                    }
                });
            }
            this.dataSource.sortingDataAccessor = (data, sortHeaderId) => {
                const configInfo = this.configOptions.allColumns.filter((item) => item.id === sortHeaderId);
                if (data[sortHeaderId] === null || data[sortHeaderId] === undefined) {
                    if (configInfo.type === 'string') {
                        return '';
                    }
                    else if (configInfo.type === 'number') {
                        return 0;
                    }
                }
                if (configInfo.type === 'string') {
                    return data[sortHeaderId].toLowerCase();
                }
                else {
                    return data[sortHeaderId];
                }
            };
            this.dataSource.sortData = this.sortData();
            this.dataSource.sort = this.sort;
            this.resetSelection();
            this.repaintTable();
        }
        if (changes &&
            changes['configOptions'] &&
            !changes['configOptions'].firstChange) {
            this.resetConfigOptions();
        }
        if (changes &&
            changes['configOptions'] &&
            changes['configOptions'].firstChange) {
            this.configOptions.allColumns.forEach((col) => {
                col.originalOrder = col.order;
            });
        }
    }
    handleEvent(event) {
        switch (event.eventType) {
            case Constants.EXECUTE_UNDO:
                this.triggerUndoExecution(event);
                break;
            case Constants.EXECUTE_REDO:
                this.triggerRedoExecution(event);
                break;
            case Constants.ADD_GROUP:
                this.addGroup(event.data);
                break;
            case Constants.REMOVE_GROUP:
                this.removeGroup(event.data);
                break;
            case Constants.ADD_COLUMN:
                this.toggleColumnVisibility(event.data.isChecked, event.data.columnId);
                break;
            case Constants.REMOVE_COLUMN:
                this.toggleColumnVisibility(event.data.isChecked, event.data.columnId);
                break;
        }
    }
    triggerUndoExecution(event) {
        switch (event.eventName) {
            case Constants.ADD_GROUP:
                this.removeGroup(event.data, undefined, true);
                break;
            case Constants.REMOVE_GROUP:
                this.addGroup(event.data, undefined, true);
                break;
            case Constants.ADD_COLUMN:
                this.toggleColumnVisibility(false, event.data, true);
                break;
            case Constants.REMOVE_COLUMN:
                this.toggleColumnVisibility(true, event.data, true);
                break;
        }
    }
    triggerRedoExecution(event) {
        switch (event.eventName) {
            case Constants.ADD_GROUP:
                this.addGroup(event.data, undefined, true);
                break;
            case Constants.REMOVE_GROUP:
                this.removeGroup(event.data, undefined, true);
                break;
            case Constants.ADD_COLUMN:
                this.toggleColumnVisibility(true, event.data, true);
                break;
            case Constants.REMOVE_COLUMN:
                this.toggleColumnVisibility(false, event.data, true);
                break;
        }
    }
    isGrouped(columnId) {
        let isGrouped = false;
        let groupByCols = this.configOptions.groupByColumns;
        if (groupByCols.indexOf(columnId) > -1) {
            isGrouped = true;
        }
        return isGrouped;
    }
    isArray(object) {
        return Array.isArray(object);
    }
    expandRowsForMultiValuedCols(colId) {
        const dataSourceTemp = [...this.dataSource.data];
        const expandedRows = [];
        dataSourceTemp.forEach((row) => {
            const multiValues = row[colId];
            if (Array.isArray(multiValues)) {
                multiValues.forEach((val) => {
                    const expandRowTemp = { ...row };
                    expandRowTemp[colId] = val;
                    expandedRows.push(expandRowTemp);
                });
            }
            else {
                expandedRows.push(row);
            }
        });
        return expandedRows;
    }
    mergeRowsForMultiValuedCols(colId) {
        const dataSourceTemp = [...this.dataSource.data];
        const mergedRows = [];
        dataSourceTemp.forEach((row) => {
            const index = mergedRows.findIndex((r) => r.id === row.id);
            if (index > -1) {
                const existingRow = mergedRows[index];
                let multiValuedCol = existingRow[colId];
                if (Array.isArray(multiValuedCol)) {
                    multiValuedCol.push(row[colId]);
                }
                else {
                    let tempVal = multiValuedCol;
                    multiValuedCol = [tempVal];
                    multiValuedCol.push(row[colId]);
                }
                existingRow[colId] = multiValuedCol;
                mergedRows[index] = existingRow;
            }
            else {
                mergedRows.push(row);
            }
        });
        return mergedRows;
    }
    addGroup(item, event, externalTrigger) {
        if (event) {
            event.stopPropagation();
        }
        if (item.isMultiValued) {
            this.dataSource.data = this.expandRowsForMultiValuedCols(item.id);
        }
        let groupedColIds = this.configOptions.groupByColumns;
        let groupIndex = groupedColIds.indexOf(item.id);
        if (this.configOptions.groupByColumns.length >= 3 || groupIndex > -1) {
            return;
        }
        let _groupedColumnIDs = [...this.configOptions.groupByColumns];
        _groupedColumnIDs.push(item.id);
        this.configOptions.groupByColumns = [..._groupedColumnIDs];
        this.reOrderColumns(item.id, 'index');
        this.setColumnsToDisplay();
        this.stick(item.id);
        this.displayedColumns.forEach((column) => {
            if (column.id === item.id) {
                column.sticky = true;
            }
        });
        this.configOptions = { ...this.configOptions };
        this.onConfigOptionsChange.emit({
            eventType: Constants.REFRESH_CONFIG,
            data: this.configOptions
        });
        if (!externalTrigger) {
            this.onConfigOptionsChange.emit({
                eventType: Constants.WRITE_TO_UNDO_REDO,
                eventName: Constants.ADD_GROUP,
                data: item
            });
        }
    }
    removeGroup(item, event, externalTrigger) {
        if (event) {
            event.stopPropagation();
        }
        if (item.isMultiValued) {
            this.dataSource.data = this.mergeRowsForMultiValuedCols(item.id);
        }
        let _groupedColumnIDs = [...this.configOptions.groupByColumns];
        let index = _groupedColumnIDs.findIndex((x) => x === item.id);
        if (index > -1) {
            _groupedColumnIDs.splice(index, 1);
        }
        this.configOptions.groupByColumns = [..._groupedColumnIDs];
        this.reOrderColumns(item.id, 'original');
        this.setColumnsToDisplay();
        this.unstick(item.id);
        this.displayedColumns.forEach((column) => {
            if (column.id == item.id) {
                column.sticky = false;
            }
        });
        this.configOptions = { ...this.configOptions };
        this.onConfigOptionsChange.emit({
            eventType: Constants.REFRESH_CONFIG,
            data: this.configOptions
        });
        if (!externalTrigger) {
            this.onConfigOptionsChange.emit({
                eventType: Constants.WRITE_TO_UNDO_REDO,
                eventName: Constants.REMOVE_GROUP,
                data: item
            });
        }
    }
    optionClicked(event, item) {
        event.stopPropagation();
        item.selected = !item.selected;
        if (item.selected) {
            this.toggleColumnVisibility(true, item.id);
        }
        else {
            this.toggleColumnVisibility(false, item.id);
        }
    }
    onTableScroll(event) {
        let element = event.target;
        let isBottomReached = Math.abs(element.scrollHeight) -
            Math.abs(element.scrollTop) -
            Math.abs(element.clientHeight) <=
            1;
        let documentScrollLeft = element.scrollLeft;
        if (this.lastScrollLeft !== documentScrollLeft) {
            this.lastScrollLeft = documentScrollLeft;
            return;
        }
        if (isBottomReached) {
            this.fetchDataCallback.emit({ data: 'infiniteScroll' });
        }
        this.scrollTop = element.scrollTop;
    }
    onRowLevelActionClick(action, event, subMenu = 'subMenu') {
        this.rowLevelActionHandler.emit({
            action: action.action,
            data: event,
            subMenu: subMenu
        });
    }
    onRowLevelActionIconClick(action, event) {
        this.dataSource.data = this.dataSource.data.map((row) => row.id === event.id
            ? { ...row, [action.property]: !row[action.property] }
            : row);
        this.rowLevelActionHandler.emit({
            action: action.action,
            data: event
        });
    }
    setColumnsToDisplay() {
        this.configOptions.allColumns.sort((a, b) => {
            return a.order - b.order;
        });
        let _displayedColumns = this.configOptions.allColumns.filter((column) => column['visible']);
        this.displayedColumns = _displayedColumns;
        let _displayedColStrs = _displayedColumns.map((col) => col['id']);
        if (this.configOptions.enableRowsSelection) {
            this.columnsToDisplay = ['selected', ..._displayedColStrs.slice()];
        }
        else {
            this.columnsToDisplay = [..._displayedColStrs.slice()];
        }
        if (this.configOptions.displayActionsColumn) {
            this.columnsToDisplay = [...this.columnsToDisplay, 'actions'];
        }
        this.configOptions = { ...this.configOptions };
    }
    groupAndSort(data) {
        let _data = [];
        let groupByCols = this.configOptions.groupByColumns;
        if (groupByCols.length > 0) {
            let groupsL0 = this.groupBy(data, groupByCols[0]);
            groupsL0 = Object.values(groupsL0);
            if (groupByCols.length > 1) {
                groupsL0.forEach((rowL0) => {
                    let _groupL1 = this.groupBy(rowL0, groupByCols[1]);
                    _groupL1 = Object.values(_groupL1);
                    if (groupByCols.length > 2) {
                        _groupL1.forEach((rowL1) => {
                            let _groupL2 = this.groupBy(rowL1, groupByCols[2]);
                            _groupL2 = Object.values(_groupL2);
                            let arr = [];
                            _groupL2.forEach((element) => {
                                arr = arr.concat(element);
                            });
                            _data = _data.concat(...arr);
                        });
                    }
                    else {
                        let arr = [];
                        _groupL1.forEach((element) => {
                            arr = arr.concat(element);
                        });
                        _data = _data.concat(...arr);
                    }
                });
            }
            else {
                let arr = [];
                groupsL0.forEach((element) => {
                    arr = arr.concat(element);
                });
                _data = _data.concat(...arr);
            }
            this.dataSource.data = _data;
        }
    }
    groupBy(arr, key) {
        let result = arr.reduce(function (r, a) {
            r[a[key]] = r[a[key]] || [];
            r[a[key]].push(a);
            return r;
        }, Object.create(null));
        return result;
    }
    cacheSpan(key, groupLevel) {
        const DATA = [...this.dataSource.data];
        for (let i = 0; i < DATA.length;) {
            let currentValue = DATA[i][key];
            let group0Key;
            let group1Key;
            let group2Key;
            let group0Val;
            let group1Val;
            let group2Val;
            if (groupLevel == 2) {
                group0Key = this.configOptions.groupByColumns[0];
                group1Key = this.configOptions.groupByColumns[1];
                group2Key = this.configOptions.groupByColumns[2];
                group0Val = DATA[i][this.configOptions.groupByColumns[0]];
                group1Val = DATA[i][this.configOptions.groupByColumns[1]];
                group2Val = DATA[i][this.configOptions.groupByColumns[2]];
            }
            else if (groupLevel == 1) {
                group0Key = this.configOptions.groupByColumns[0];
                group1Key = this.configOptions.groupByColumns[1];
                group0Val = DATA[i][this.configOptions.groupByColumns[0]];
                group1Val = DATA[i][this.configOptions.groupByColumns[1]];
            }
            else if (groupLevel == 0) {
                group0Key = this.configOptions.groupByColumns[0];
                group1Key = this.configOptions.groupByColumns[1];
                group0Val = DATA[i][this.configOptions.groupByColumns[0]];
            }
            let count = 1;
            for (let j = i + 1; j < DATA.length; j++) {
                let isSameGroup = true;
                if (groupLevel == 2) {
                    if ((group0Key && group0Val !== DATA[j][group0Key]) ||
                        (group1Key && group1Val !== DATA[j][group1Key])) {
                        isSameGroup = false;
                    }
                }
                else if (groupLevel == 1) {
                    if (group0Key && group0Val !== DATA[j][group0Key]) {
                        isSameGroup = false;
                    }
                }
                if (!isSameGroup) {
                    break;
                }
                if (currentValue !== DATA[j][key]) {
                    break;
                }
                count++;
            }
            if (!this.spans[i]) {
                this.spans[i] = {};
            }
            this.spans[i][key] = count;
            i += count;
        }
    }
    getRowSpan(col, index) {
        let groupByCols = this.configOptions.groupByColumns;
        if (groupByCols.indexOf(col) > -1) {
            return this.spans[index] && this.spans[index][col];
        }
        return 1;
    }
    getRowSpanDisplay(col, index) {
        let displayStr = '';
        let groupByCols = this.configOptions.groupByColumns;
        if (groupByCols.indexOf(col) > -1) {
            displayStr = this.spans[index] && this.spans[index][col] ? 'none' : '';
        }
        return displayStr;
    }
    getColumnByID(colId) {
        let column;
        let colIndex = this.configOptions.allColumns.findIndex((x) => x.id === colId);
        if (colIndex > -1) {
            column = this.configOptions.allColumns[colIndex];
        }
        return column;
    }
    openSnackBar(message) {
        this._snackBar.open(message, '', {
            horizontalPosition: this.horizontalPosition,
            verticalPosition: this.verticalPosition,
            duration: 5000 // 5 milliseconds
        });
    }
    toggleColumnVisibility(isVisible, colId, externalTrigger) {
        this.visibleColumns = this.configOptions.allColumns.filter((column) => column['visible']);
        if (!isVisible && this.visibleColumns.length == 1) {
            this.openSnackBar('Please make sure to have aleast one column in the report!');
            return;
        }
        let groupedColIds = this.configOptions.groupByColumns;
        let groupIndex = groupedColIds.indexOf(colId);
        if (groupIndex > -1 && !isVisible) {
            let column = this.getColumnByID(colId);
            if (column) {
                this.removeGroup(column);
            }
        }
        this.configOptions.allColumns.forEach((col) => {
            if (col['id'] === colId) {
                col['visible'] = isVisible;
            }
        });
        this.reOrderColumns(colId, 'end');
        this.setColumnsToDisplay();
        this.onConfigOptionsChange.emit({
            eventType: Constants.REFRESH_CONFIG,
            data: this.configOptions
        });
        if (!externalTrigger) {
            let _eventName = isVisible
                ? Constants.ADD_COLUMN
                : Constants.REMOVE_COLUMN;
            this.onConfigOptionsChange.emit({
                eventType: Constants.WRITE_TO_UNDO_REDO,
                eventName: _eventName,
                data: colId
            });
        }
    }
    hideColumn(columnId) {
        this.toggleColumnVisibility(false, columnId);
    }
    showColumn(event, column) {
        event.stopPropagation();
        this.toggleColumnVisibility(true, column.id);
    }
    drop(event) {
        let _columnsToDisplay = this.columnsToDisplay;
        if (this.configOptions.enableRowsSelection) {
            this.columnsToDisplay.splice(0, 1);
            _columnsToDisplay = this.columnsToDisplay;
            moveItemInArray(_columnsToDisplay, event.previousIndex, event.currentIndex);
            this.columnsToDisplay = ['selected', ..._columnsToDisplay];
        }
        else {
            moveItemInArray(_columnsToDisplay, event.previousIndex, event.currentIndex);
            this.columnsToDisplay = [..._columnsToDisplay];
        }
    }
    reOrderColumns(columnName, movePosition) {
        let prevIndex = this.configOptions.allColumns.findIndex((x) => x.id === columnName);
        let newIndex;
        if (movePosition === 'left') {
            newIndex = prevIndex - 1;
        }
        else if (movePosition === 'right') {
            newIndex = prevIndex + 1;
        }
        else if (movePosition === 'index') {
            newIndex = this.configOptions.groupByColumns.length - 1;
        }
        else if (movePosition === 'original') {
            const index = this.configOptions.allColumns.findIndex((col) => col.id === columnName);
            if (index > -1) {
                newIndex =
                    this.configOptions.allColumns[index].originalOrder ||
                        this.configOptions.allColumns.length;
                newIndex = newIndex - 1;
            }
            else {
                newIndex = this.configOptions.allColumns.length;
            }
        }
        else {
            newIndex = this.configOptions.allColumns.length;
        }
        moveItemInArray(this.configOptions.allColumns, prevIndex, newIndex);
        this.configOptions.allColumns.forEach((column, index) => {
            column.order = index + 1;
        });
        this.repaintTable();
    }
    moveLeft(columnName) {
        let _columnsToDisplay = this.columnsToDisplay;
        if (this.configOptions.enableRowsSelection) {
            this.columnsToDisplay.splice(0, 1);
            _columnsToDisplay = this.columnsToDisplay;
            let prevIndex = _columnsToDisplay.indexOf(columnName);
            let currentIndex = prevIndex - 1;
            moveItemInArray(_columnsToDisplay, prevIndex, currentIndex);
            this.reOrderColumns(columnName, 'left');
            this.columnsToDisplay = ['selected', ..._columnsToDisplay];
        }
        else {
            let prevIndex = _columnsToDisplay.indexOf(columnName);
            let currentIndex = prevIndex - 1;
            moveItemInArray(_columnsToDisplay, prevIndex, currentIndex);
            this.reOrderColumns(columnName, 'left');
            this.columnsToDisplay = [..._columnsToDisplay];
        }
    }
    moveRight(columnName) {
        let _columnsToDisplay = this.columnsToDisplay;
        if (this.configOptions.enableRowsSelection) {
            this.columnsToDisplay.splice(0, 1);
            _columnsToDisplay = this.columnsToDisplay;
            let prevIndex = _columnsToDisplay.indexOf(columnName);
            let currentIndex = prevIndex + 1;
            moveItemInArray(_columnsToDisplay, prevIndex, currentIndex);
            this.reOrderColumns(columnName, 'right');
            this.columnsToDisplay = ['selected', ..._columnsToDisplay];
        }
        else {
            let prevIndex = _columnsToDisplay.indexOf(columnName);
            let currentIndex = prevIndex + 1;
            moveItemInArray(_columnsToDisplay, prevIndex, currentIndex);
            this.reOrderColumns(columnName, 'right');
            this.columnsToDisplay = [..._columnsToDisplay];
        }
    }
    isSticky(stickyColumns, id) {
        return stickyColumns.indexOf(id) !== -1;
    }
    isStickyEnd(stickyEndColumns, id) {
        return stickyEndColumns.indexOf(id) !== -1;
    }
    stick(columnName) {
        if (!this.stickyColumns.includes(columnName)) {
            this.stickyColumns.push(columnName);
        }
        this.configOptions.allColumns.forEach((column) => {
            if (column.id === columnName) {
                column.sticky = true;
            }
        });
    }
    stickToEnd(columnName) {
        this.stickyEndColumns.push(columnName);
    }
    unstick(columnName) {
        this.stickyColumns = this.stickyColumns.filter((col) => col !== columnName);
        this.configOptions.allColumns.forEach((column) => {
            if (columnName === column.id) {
                column.sticky = false;
            }
        });
    }
    unstickEnd(columnName) {
        const index = this.stickyEndColumns.indexOf(columnName);
        if (index > -1) {
            this.stickyEndColumns.splice(index, 1);
        }
    }
    /** Whether the number of selected elements matches the total number of rows. */
    isAllSelected() {
        const numSelected = this.selection.selected.length;
        const numRows = this.dataSource.data.length;
        return numSelected === numRows;
    }
    /** Selects all rows if they are not all selected; otherwise clear selection. */
    masterToggle() {
        if (this.isAllSelected()) {
            this.selection.clear();
            this.rowLevelActionHandler.emit({
                action: 'toggleAllRows',
                data: false
            });
            return;
        }
        this.rowLevelActionHandler.emit({
            action: 'toggleAllRows',
            data: true
        });
        this.selection.select(...this.dataSource.data);
    }
    /** The label for the checkbox on the passed row */
    checkboxLabel(row) {
        if (!row) {
            return `${this.isAllSelected() ? 'deselect' : 'select'} all`;
        }
        return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;
    }
    toggleRowSelect(row) {
        if (row) {
            this.selection.toggle(row);
            this.rowLevelActionHandler.emit({
                action: 'toggleRowSelect',
                data: row
            });
        }
    }
    onCellClick(row, columnId, controlType, element = null) {
        if (controlType !== 'menu') {
            if (!element)
                this.cellClickActionHandler.emit({
                    row,
                    columnId,
                    scrollTop: this.scrollTop ? this.scrollTop : 0
                });
            else
                this.cellClickActionHandler.emit({
                    row,
                    columnId,
                    element,
                    scrollTop: this.scrollTop ? this.scrollTop : 0
                });
        }
    }
    onMenuButtonClick(row, columnId, option) {
        this.cellClickActionHandler.emit({
            row,
            columnId,
            option
        });
    }
    resetTableScroll() {
        if (!this.dataSource.data.length) {
            this.configOptions.tableHeight = '60px';
        }
        // commented this line of code to not to scroll to top directly
        // const element = document.getElementById('matTableMain');
        // if (element) {
        //   element.scrollTop = 0;
        // }
    }
    repaintTable() {
        this.groupAndSort(this.dataSource.data);
        this.spans = [];
        this.configOptions.groupByColumns.forEach((col, index) => {
            this.cacheSpan(col, index);
        });
        this.changeDetectorRefs.detectChanges();
    }
    ngAfterViewInit() {
        this.dataSource.paginator = this.paginator;
        if (this.configOptions?.defaultSortColumn) {
            this.sort.active = this.configOptions.defaultSortColumn;
            this.sort.direction = this.configOptions?.defaultSortDirection
                ? this.configOptions.defaultSortDirection
                : 'asc';
        }
        this.dataSource.sort = this.sort;
        this.resetTableScroll();
        this.repaintTable();
    }
    evaluateCondition(rowData, item = { condition: true }) {
        if (item.condition === true || item.condition === false)
            return item.condition;
        const { operation, operand, fieldName, dependentFieldName } = item.condition;
        const fieldValue = rowData[fieldName];
        const dependentFieldValue = dependentFieldName
            ? rowData[dependentFieldName]
            : true;
        if (dependentFieldValue === false)
            return;
        switch (operation) {
            case '=':
                return fieldValue === operand;
            case '!=':
                return fieldValue !== operand;
            case '>':
                return fieldValue > operand;
            case '<':
                return fieldValue < operand;
            case '>=':
                return fieldValue >= operand;
            case '<=':
                return fieldValue <= operand;
            case 'contains':
                return fieldValue
                    .toString()
                    .toLowerCase()
                    .includes(operand.toString().toLowerCase());
            case 'notContains':
                return !fieldValue
                    .toString()
                    .toLowerCase()
                    .includes(operand.toString().toLowerCase());
            case 'startsWith':
                return fieldValue
                    .toString()
                    .toLowerCase()
                    .startsWith(operand.toString().toLowerCase());
            case 'endsWith':
                return fieldValue
                    .toString()
                    .toLowerCase()
                    .endsWith(operand.toString().toLowerCase());
            case 'in':
                return operand.includes(fieldValue);
            case 'notIn':
                return !operand.includes(fieldValue);
            case 'isNull':
                return fieldValue === null;
            case 'isNotNull':
                return fieldValue !== null;
            case 'isEmpty':
                return fieldValue === '';
            case 'isNotEmpty':
                return fieldValue !== '';
            case 'isTrue':
                return fieldValue === true;
            case 'isFalse':
                return fieldValue === false;
            case 'isTruthy':
                return !!fieldValue;
            case 'isFalsy':
                return !fieldValue;
            case 'isToday':
            // todo
            case 'isThisWeek':
            //todo
            case 'isThisMonth':
            //todo
        }
    }
    getConditionalStyles(existingStyles, rowData, column) {
        let styles = { ...existingStyles };
        if (column.hasConditionalStyles) {
            const conditionalStyles = this.configOptions.conditionalStyles;
            let value = rowData[column.id];
            if (value) {
                value = value.toLowerCase();
            }
            const style = conditionalStyles[value];
            styles = { ...styles, ...style };
        }
        if (column?.hasMatToolTip) {
            const style = { 'white-space': 'nowrap', 'display': 'block', 'overflow': 'hidden', 'text-overflow': 'ellipsis', 'max-width': '160px' };
            styles = { ...styles, ...style };
        }
        if (rowData[column.id + '_styles'] &&
            typeof rowData[column.id + '_styles'] === 'object') {
            styles = { ...styles, ...rowData[column.id + '_styles'] };
        }
        return styles;
    }
    evaluateExpression(rowData, column) {
        let styles = {};
        let groupedColumns = this.configOptions.groupByColumns;
        let index = groupedColumns.indexOf(column.id);
        if (index > -1) {
            styles = {
                ...styles,
                background: this.configOptions.groupLevelColors[index]
                    ? this.configOptions.groupLevelColors[index]
                    : ''
            };
        }
        column.operations?.forEach((op) => {
            switch (op.operation) {
                case 'gt':
                    if (rowData[column.id] > op.value) {
                        styles = { ...styles, ...op.styles };
                    }
                    break;
                case 'lt':
                    if (rowData[column.id] < op.value) {
                        styles = { ...styles, ...op.styles };
                    }
                    break;
                case 'equal':
                    if (rowData[column.id] === op.value) {
                        styles = { ...styles, ...op.styles };
                    }
                    break;
            }
        });
        return styles;
    }
    getDisplayValues(value, separator = ',') {
        return value ? value.split(separator) : [];
    }
    getDisplayType(element, column, value) {
        const status = element[column.controlValue?.dependentFieldId];
        if (value?.dependentFieldValues?.length) {
            if (value?.dependentFieldValues.includes(status?.toLowerCase()))
                value.displayType = 'dropdown';
            else
                value.displayType = 'text';
        }
        return value.displayType;
    }
    onToggleChange(event) {
        this.onToggleChangeHandler.emit(event.checked);
    }
    scrollToTop() {
        const element = document.getElementById('matTableMain');
        if (element) {
            element.scrollTop = 0;
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.scrollSubscription.unsubscribe();
    }
    resetSelection() {
        this.selection = new SelectionModel(true, this.selectedRows);
    }
    // sortDataSource(idVal: string, startVal?: 'asc' | 'desc'): void {
    //   this.dataSource.sort?.sort(<MatSortable>({ id: idVal, start: startVal}));
    // }
    onValChange(element, val) {
        this.onSelectButtonToggle.emit({ element, val });
    }
}
DynamictableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DynamictableComponent, deps: [{ token: i1.MatSnackBar }, { token: i0.ChangeDetectorRef }, { token: i2.DynamictableFilterService }, { token: i3.DomSanitizer }, { token: i2.DynamictableScrollerService }], target: i0.ɵɵFactoryTarget.Component });
DynamictableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DynamictableComponent, selector: "cwp-dynamictable", inputs: { configOptions: "configOptions", dataSource: "dataSource" }, outputs: { fetchDataCallback: "fetchDataCallback", rowLevelActionHandler: "rowLevelActionHandler", cellClickActionHandler: "cellClickActionHandler", onConfigOptionsChange: "onConfigOptionsChange", onToggleChangeHandler: "onToggleChangeHandler", onSelectButtonToggle: "onSelectButtonToggle" }, viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true }, { propertyName: "sort", first: true, predicate: MatSort, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div>\n  <div class=\"leftPanel\" *ngIf=\"configOptions.displayFilterPanel\">\n    <cwp-table-filter-panel\n      [configOptions]=\"configOptions\"\n      (eventsHandler)=\"handleEvent($event)\"\n    ></cwp-table-filter-panel>\n  </div>\n  <div\n    [ngClass]=\"\n      configOptions.displayFilterPanel ? 'tableMainContent' : 'tableFullWidth'\n    \"\n  >\n    <div class=\"tableMain\" id=\"tableMain\" (scroll)=\"onTableScroll($event)\">\n      <table\n        id=\"matTableMain\"\n        mat-table\n        class=\"mat-elevation-z0 dynamictable\"\n        [dataSource]=\"dataSource\"\n        matSort\n        multiTemplateDataRows\n        cdkDropList\n        [ngStyle]=\"{\n          width: configOptions.tableWidth,\n          'max-height': configOptions.tableHeight\n        }\"\n        cdkDropListOrientation=\"horizontal\"\n        (cdkDropListDropped)=\"drop($event)\"\n        (scroll)=\"onTableScroll($event)\"\n      >\n        <!-- Checkbox Column -->\n        <ng-container\n          matColumnDef=\"selected\"\n          *ngIf=\"configOptions.enableRowsSelection\"\n        >\n          <th mat-header-cell *matHeaderCellDef class=\"w-50 rowselect-checkbox\">\n            <mat-checkbox\n              (change)=\"$event ? masterToggle() : null\"\n              [checked]=\"selection.hasValue() && isAllSelected()\"\n              [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n              [aria-label]=\"checkboxLabel()\"\n            >\n            </mat-checkbox>\n          </th>\n          <td mat-cell *matCellDef=\"let row\" class=\"w-50\">\n            <mat-checkbox\n              [disabled]=\"\n                configOptions.enableRowsSelection &&\n                !evaluateCondition(row, configOptions.enableRowLevelActions)\n              \"\n              (click)=\"$event.stopPropagation()\"\n              (change)=\"$event ? toggleRowSelect(row) : null\"\n              [checked]=\"\n                configOptions.enableRowsSelection &&\n                evaluateCondition(row, configOptions.enableRowLevelActions) &&\n                selection.isSelected(row)\n              \"\n              [aria-label]=\"checkboxLabel(row)\"\n            >\n            </mat-checkbox>\n          </td>\n        </ng-container>\n        <!-- Other Dynamic Columns -->\n        <ng-container\n          [matColumnDef]=\"column.id\"\n          [sticky]=\"isSticky(stickyColumns, column.id)\"\n          [stickyEnd]=\"isStickyEnd(stickyEndColumns, column.id)\"\n          *ngFor=\"let column of displayedColumns\"\n        >\n          <th\n            mat-header-cell\n            cdkDrag\n            [cdkDragDisabled]=\"!column.movable\"\n            *matHeaderCellDef\n            class=\"tableHeaderCell table-column\"\n            [disableClear]=\"true\"\n            mat-sort-header\n            [disabled]=\"!column.sortable\"\n          >\n            <!-- <th mat-header-cell cdkDrag [cdkDragDisabled]=\"column.disabled\" *matHeaderCellDef class=\"tableHeaderCell\"> -->\n            <div class=\"headerCell\">\n              <div id=\"dynamictableHeadCellName\" class=\"headerCellLabel\">\n                {{ column.displayName }}\n                <span *ngIf=\"column.sortable === true\">\n                  <span\n                    id=\"dynamictableSortAsc\"\n                    *ngIf=\"\n                      sort &&\n                      sort.active === column.id &&\n                      sort.direction == 'asc'\n                    \"\n                  >\n                    &#8593;\n                  </span>\n                  <span\n                    id=\"dynamictableSortDesc\"\n                    *ngIf=\"\n                      sort &&\n                      sort.active === column.id &&\n                      sort.direction == 'desc'\n                    \"\n                  >\n                    &#8595;\n                  </span>\n                  <span *ngIf=\"sort && sort.active !== column.id\">&#8645;</span>\n                </span>\n              </div>\n              <div class=\"headerCellActions\" (click)=\"$event.stopPropagation()\">\n                <button\n                  id=\"dynamictableMoreOption\"\n                  type=\"button\"\n                  mat-icon-button\n                  [matMenuTriggerFor]=\"menu\"\n                  *ngIf=\"column.showMenuOptions\"\n                  aria-label=\"icon-button with a menu\"\n                  (click)=\"$event.stopPropagation()\"\n                  aria-label=\"More Options\"\n                >\n                  <mat-icon>more_horiz</mat-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n                  <button\n                    id=\"dynamictableHideCol\"\n                    type=\"button\"\n                    mat-menu-item\n                    (click)=\"hideColumn(column.id)\"\n                    *ngIf=\"column.hideable\"\n                  >\n                    Hide Column\n                  </button>\n                  <button\n                    id=\"dynamictableMoveLeft\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"column.movable\"\n                    (click)=\"moveLeft(column.id)\"\n                  >\n                    Move Left\n                  </button>\n                  <button\n                    id=\"dynamictableMoveRight\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"column.movable\"\n                    (click)=\"moveRight(column.id)\"\n                  >\n                    Move Right\n                  </button>\n                  <button\n                    id=\"dynamictableStick\"\n                    type=\"button\"\n                    mat-menu-item\n                    (click)=\"stick(column.id)\"\n                    *ngIf=\"\n                      !isSticky(stickyColumns, column.id) && column.stickable\n                    \"\n                  >\n                    Stick\n                  </button>\n                  <!-- <button\n                    mat-menu-item\n                    (click)=\"stickToEnd(column.id)\"\n                    *ngIf=\"!isStickyEnd(stickyColumns, column.id)\"\n                  >\n                    Stick to End\n                  </button> -->\n                  <button\n                    id=\"dynamictableColStickable\"\n                    type=\"button\"\n                    mat-menu-item\n                    (click)=\"unstick(column.id)\"\n                    *ngIf=\"\n                      (isSticky(stickyColumns, column.id) ||\n                        isStickyEnd(stickyEndColumns, column.id)) &&\n                      column.stickable\n                    \"\n                  >\n                    Un-stick\n                  </button>\n                  <button\n                    id=\"dynamictableAddGroup\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"\n                      column.visible &&\n                      column.groupable &&\n                      !isGrouped(column.id)\n                    \"\n                    [disabled]=\"this.configOptions.groupByColumns.length >= 3\"\n                    (click)=\"addGroup(column, $event)\"\n                  >\n                    Group Rows by this Column\n                  </button>\n                  <button\n                    id=\"dynamictableRemoveGroup\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"\n                      column.visible && column.groupable && isGrouped(column.id)\n                    \"\n                    (click)=\"removeGroup(column, $event)\"\n                  >\n                    Un-group this Column\n                  </button>\n                </mat-menu>\n              </div>\n            </div>\n          </th>\n          <!-- <td _ngcontent-pqd-c296=\"\" role=\"cell\" mat-cell=\"\" class=\"mat-cell cdk-cell cdk-column-name mat-column-name ng-tns-c296-0 ng-star-inserted\">\n            </td>\n         -->\n          <td\n            mat-cell\n            *matCellDef=\"let element; let i = dataIndex\"\n            [ngStyle]=\"evaluateExpression(element, column)\"\n            [attr.rowspan]=\"getRowSpan(column.id, i)\"\n            [style.display]=\"getRowSpan(column.id, i) ? '' : 'none'\"\n            class=\"table-column\"\n            (click)=\"onCellClick(element, column.id, column.controlType)\"\n            id=\"{{ column.id }}\"\n          >\n            <div\n              class=\"displayFlex\"\n              *ngIf=\"column && element\"\n              [ngClass]=\"{\n                disabled:\n                  element[column.controlValue?.dependentFieldId] === true &&\n                  column.controlValue.disableBackground === true,\n                'not-disabled':\n                  element[column.controlValue?.dependentFieldId] === false &&\n                  column.controlValue.disableBackground === true\n              }\"\n            >\n              <!-- <span\n                *ngIf=\"\n                  column.hasPreTextImage &&\n                  element.preTextImageConfig &&\n                  element.preTextImageConfig.logoAvialable === false\n                \"\n                [ngStyle]=\"element.preTextImageConfig.style\"\n              >\n                <avatar [text]=\"element.name\"></avatar>\n              </span> -->\n\n              <img\n                id=\"dynamictableImg\"\n                [src]=\"element.preTextImage.image\"\n                [ngStyle]=\"element.preTextImage.style\"\n                *ngIf=\"\n                  column.hasPreTextImage &&\n                  element.preTextImage &&\n                  element.preTextImage.image &&\n                  element.preTextImage.condition &&\n                  evaluateCondition(element, element.preTextImage)\n                \"\n                alt=\"Pre Image\"\n              />\n              <span\n                *ngIf=\"column.controlType === 'string'\"\n                [ngClass]=\"column?.hasMatToolTip ? 'mat-tooltip-parent' : ''\"\n              >\n                <span\n                  id=\"dynamictableColType\"\n                  *ngIf=\"!isArray(element[column.id])\"\n                  [ngStyle]=\"\n                    getConditionalStyles(column.titleStyle, element, column)\n                  \"\n                  (click)=\"onCellClick(element, column.id, column.controlType)\"\n                  #tooltip=\"matTooltip\"\n                  matTooltip=\"{{ element[column.id] }}\"\n                  matTooltipPosition=\"above\"\n                  [matTooltipDisabled]=\"!column.hasMatToolTip\"\n                >\n                  {{ element[column.id] | dynamicTypePipe : column.type }}\n                  <span\n                    *ngIf=\"column.hasRightElement\"\n                    id=\"dynamictableRightElement\"\n                    [innerHTML]=\"element.rightElement\"\n                  >\n                  </span>\n                </span>\n                <span\n                  *ngIf=\"isArray(element[column.id])\"\n                  [ngStyle]=\"column.titleStyle\"\n                >\n                  <span\n                    id=\"dynamictableItem\"\n                    *ngFor=\"let item of element[column.id]; last as isLast\"\n                    (click)=\"onCellClick(element, column.id, item)\"\n                  >\n                    {{ item }}<span *ngIf=\"!isLast\">, </span></span\n                  > </span\n                ><br />\n                <span\n                  id=\"dynamictableSubtitle\"\n                  *ngIf=\"column.hasSubtitle\"\n                  [ngStyle]=\"\n                    element[column.subtitleColumn] !== ''\n                      ? column.subtitleStyle\n                      : ''\n                  \"\n                >\n                  {{\n                    element[column.subtitleColumn]\n                      | dynamicTypePipe : column.type\n                  }}\n                </span>\n                <span\n                  *ngIf=\"column.hasBelowElement\"\n                  id=\"dynamictableSubtitleElement\"\n                >\n                  <br />\n                  <span [innerHTML]=\"element.belowElement\"></span>\n                </span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'slide-toggle'\">\n                <span class=\"slide-toggle\">\n                  <mat-slide-toggle\n                    [checked]=\"element[column.id]\"\n                    (change)=\"onToggleChange($event)\"\n                  ></mat-slide-toggle>\n                </span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'html'\">\n                <span [innerHTML]=\"element[column.id]\"></span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'button'\" class=\"button-span\">\n                <button\n                  id=\"dynamictableColValue\"\n                  type=\"button\"\n                  mat-stroked-button\n                  class=\"table-buttons\"\n                  *ngIf=\"!element[column.id]; else freeText\"\n                >\n                  {{ column.controlValue }}\n                </button>\n                <ng-template #freeText>\n                  <span id=\"dynamictableColId\">\n                    {{ element[column.id] }}\n                  </span>\n                </ng-template>\n              </span>\n\n              <span\n                *ngIf=\"column.controlType === 'button-toggle'\"\n                class=\"mat-button-span\"\n              >\n                <span\n                  *ngIf=\"column?.controlValue.length && !element[column.id]\"\n                >\n                  <ng-container *ngFor=\"let button of column?.controlValue\">\n                    <mat-button-toggle-group\n                      #group=\"matButtonToggleGroup\"\n                      (change)=\"onValChange(element, group.value)\"\n                    >\n                      <mat-button-toggle\n                        [value]=\"button.value\"\n                        class=\"{{ button.class }}\"\n                      >\n                        <mat-icon *ngIf=\"button.isIcon\">\n                          {{ button.iconName }}\n                        </mat-icon>\n                      </mat-button-toggle>\n                    </mat-button-toggle-group>\n                  </ng-container>\n                </span>\n                <span id=\"dynamictableColId\" *ngIf=\"element[column.id]\">\n                  {{ element[column.id] }}\n                </span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'menu'\" class=\"button-span\">\n                <button\n                  mat-stroked-button\n                  class=\"table-buttons\"\n                  [matMenuTriggerFor]=\"menu\"\n                  *ngIf=\"!element[column.id]; else freeText\"\n                >\n                  {{ column.controlValue['buttonName'] }}\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                  <ng-template matMenuContent>\n                    <button\n                      mat-menu-item\n                      (click)=\"onMenuButtonClick(element, column.id, btn)\"\n                      *ngFor=\"let btn of column.controlValue['menuButtonNames']\"\n                      class=\"mat-menu-button\"\n                    >\n                      {{ btn }}\n                    </button>\n                  </ng-template>\n                </mat-menu>\n                <ng-template #freeText>\n                  <span>\n                    {{ element[column.id] }}\n                  </span>\n                </ng-template>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'space-between'\">\n                <span class=\"space-between\" [ngStyle]=\"column.titleStyle\">\n                  <div\n                    *ngFor=\"\n                      let value of getDisplayValues(\n                        element[column.id],\n                        column.controlValue\n                      )\n                    \"\n                  >\n                    {{ value }}\n                  </div>\n                </span>\n              </span>\n\n              <span\n                *ngIf=\"column.controlType === 'dropdown'\"\n                [id]=\"element.id\"\n                class=\"width-100\"\n              >\n                <span\n                  class=\"dropdown\"\n                  *ngIf=\"\n                    getDisplayType(element, column, column.controlValue) ===\n                    'dropdown'\n                  \"\n                >\n                  <span\n                    id=\"dynamictableDropDown\"\n                    *ngIf=\"element[column.id] !== undefined\"\n                    class=\"dropdown-value\"\n                  >\n                    {{ element[column.id] }}\n                  </span>\n                  <span\n                    id=\"dynamictableSelect\"\n                    *ngIf=\"element[column.id] === undefined\"\n                    class=\"select-text\"\n                  >\n                    Select\n                  </span>\n                  <span class=\"arrow\">\n                    <mat-icon>arrow_drop_down</mat-icon>\n                  </span>\n                </span>\n                <span\n                  id=\"dynamictableText\"\n                  *ngIf=\"\n                    getDisplayType(element, column, column.controlValue) ===\n                    'text'\n                  \"\n                >\n                  {{ element[column.id] }}\n                </span>\n              </span>\n\n              <!-- <span\n                *ngIf=\"\n                  column.hasPostTextImage &&\n                  element.postTextImageConfig &&\n                  element.postTextImageConfig.logoAvialable === false\n                \"\n                [ngStyle]=\"element.postTextImageConfig.style\"\n              >\n                <avatar [text]=\"element.name\"></avatar>\n              </span> -->\n\n              <img\n                [src]=\"element.postTextImage.image\"\n                [ngStyle]=\"element.postTextImage.style\"\n                *ngIf=\"\n                  column.hasPostTextImage &&\n                  element.postTextImage &&\n                  element.postTextImage.image &&\n                  element.postTextImage.condition &&\n                  evaluateCondition(element, element.postTextImage)\n                \"\n                alt=\"Post Image\"\n              />\n            </div>\n          </td>\n        </ng-container>\n        <ng-container\n          matColumnDef=\"actions\"\n          [stickyEnd]=\"true\"\n          *ngIf=\"configOptions.displayActionsColumn\"\n        >\n          <th\n            id=\"dynamictableAction\"\n            mat-header-cell\n            *matHeaderCellDef\n            class=\"w-50 actions-column tableHeaderCell table-column\"\n          >\n            Actions\n          </th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-icons-display-flex\">\n              <ng-container\n                *ngIf=\"configOptions.rowLevelActions.iconAction; let iconAction\"\n              >\n                <button\n                  id=\"dynamictableRowLevelAction\"\n                  type=\"button\"\n                  mat-icon-button\n                  class=\"more-actions\"\n                  (click)=\"onRowLevelActionIconClick(iconAction, row)\"\n                  aria-label=\"Row Level Action\"\n                >\n                  <mat-icon\n                    id=\"dynamictableIconToggleOn\"\n                    *ngIf=\"row[iconAction.property]\"\n                    [ngStyle]=\"iconAction.styleToggleOn\"\n                    (click)=\"onRowLevelActionIconClick(iconAction, row)\"\n                    class=\"action-icons\"\n                    >{{ iconAction.iconToggleOn }}\n                  </mat-icon>\n                  <mat-icon\n                    id=\"dynamictableToggleOff\"\n                    *ngIf=\"!row[iconAction.property]\"\n                    [ngStyle]=\"iconAction.styleToggleOff\"\n                    (click)=\"onRowLevelActionIconClick(iconAction, row)\"\n                    class=\"action-icons\"\n                    >{{ iconAction.iconToggleOff }}</mat-icon\n                  >\n                </button>\n              </ng-container>\n              <button\n                id=\"dynamictableActionMenu\"\n                type=\"button\"\n                mat-icon-button\n                [matMenuTriggerFor]=\"actionsMenu\"\n                class=\"more-actions\"\n                [disabled]=\"\n                  !evaluateCondition(row, configOptions.enableRowLevelActions)\n                \"\n                aria-label=\"More Options\"\n              >\n                <mat-icon id=\"dynamictableMoreIcon\">more_horiz</mat-icon>\n              </button>\n              <mat-menu #actionsMenu=\"matMenu\">\n                <ng-container\n                  *ngFor=\"\n                    let action of configOptions.rowLevelActions.menuActions\n                  \"\n                >\n                  <ng-container *ngIf=\"action.type !== 'menu'\">\n                    <button\n                      id=\"dynamictableActionClick\"\n                      type=\"button\"\n                      mat-menu-item\n                      *ngIf=\"\n                        !action.condition ||\n                        (action.condition && evaluateCondition(row, action))\n                      \"\n                      (click)=\"onRowLevelActionClick(action, row)\"\n                    >\n                      <mat-icon\n                        id=\"dynamictableActionIcon\"\n                        class=\"action-icons\"\n                        [ngClass]=\"{\n                          'red-text':\n                            action.title === 'Delete' ||\n                            action.title === 'Deactivate' ||\n                            action.title === 'Archive'\n                        }\"\n                        *ngIf=\"action.icon\"\n                        >{{ action.icon }}</mat-icon\n                      >\n                      <span\n                        id=\"dynamictableActionTitle\"\n                        [ngClass]=\"{\n                          'red-text':\n                            action.title === 'Delete' ||\n                            action.title === 'Deactivate' ||\n                            action.title === 'Archive'\n                        }\"\n                        >{{ action.title }}</span\n                      >\n                    </button>\n                  </ng-container>\n                  <ng-container *ngIf=\"action.type === 'menu'\">\n                    <button\n                      id=\"dynamictableActionClick\"\n                      type=\"button\"\n                      mat-menu-item\n                      [matMenuTriggerFor]=\"nestedMenu\"\n                      *ngIf=\"\n                        !action.condition ||\n                        (action.condition && evaluateCondition(row, action))\n                      \"\n                    >\n                      <span id=\"dynamictableActionTitle\">{{\n                        action.title\n                      }}</span>\n                    </button>\n                    <mat-menu #nestedMenu=\"matMenu\">\n                      <button\n                        mat-menu-item\n                        *ngFor=\"let subMenu of action.menuValues\"\n                        (click)=\"onRowLevelActionClick(action, row, subMenu)\"\n                      >\n                        {{ subMenu }}\n                      </button>\n                    </mat-menu>\n                  </ng-container>\n                </ng-container>\n              </mat-menu>\n            </div>\n          </td>\n        </ng-container>\n        <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n        <ng-container matColumnDef=\"expandedDetail\">\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            [attr.colspan]=\"columnsToDisplay.length\"\n          >\n            <div\n              class=\"example-element-detail\"\n              [@detailExpand]=\"\n                element == expandedElement ? 'expanded' : 'collapsed'\n              \"\n            >\n              <div class=\"example-element-diagram\">\n                <div\n                  id=\"dynamictableElementName\"\n                  class=\"example-element-position\"\n                >\n                  {{ element.name }}\n                </div>\n                <div\n                  id=\"dynamictableElementProgress\"\n                  class=\"example-element-symbol\"\n                >\n                  {{ element.progress }}\n                </div>\n                <div\n                  id=\"dynamictableElementExample\"\n                  class=\"example-element-name\"\n                >\n                  {{ element.fruit }}\n                </div>\n                <div id=\"dynamictableElementId\" class=\"example-element-weight\">\n                  {{ element.id }}\n                </div>\n              </div>\n              <div\n                id=\"dynamictableElementDesc\"\n                class=\"example-element-description\"\n              >\n                {{ element.name }}\n                <span class=\"example-element-description-attribution\">\n                  -- Wikipedia\n                </span>\n              </div>\n            </div>\n          </td>\n        </ng-container>\n        <tr\n          mat-header-row\n          *matHeaderRowDef=\"columnsToDisplay; sticky: true\"\n          class=\"headerRow\"\n        ></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let row; columns: columnsToDisplay\"\n          [class.example-expanded-row]=\"expandedElement === row\"\n          (click)=\"\n            expandedElement = expandedElement === row ? null : row;\n            highlight(row)\n          \"\n          [ngClass]=\"{ highlight: selectedRowIndex == row?.id }\"\n        ></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let row; columns: ['expandedDetail']; when: customWhen\"\n          class=\"example-detail-row\"\n        ></tr>\n      </table>\n      <div *ngIf=\"!dataSource.data.length\" class=\"noResultsContainer\">\n        <span id=\"dynamictableNoDataFound\" class=\"noSearchResultsText\">\n          {{\n            configOptions?.noDataText\n              ? configOptions?.noDataText\n              : 'No Data Found'\n          }}\n        </span>\n      </div>\n    </div>\n    <mat-paginator\n      *ngIf=\"configOptions.enablePagination\"\n      [pageSizeOptions]=\"[10, 25, 50, 75, 100]\"\n      aria-label=\"Select Page\"\n    ></mat-paginator>\n  </div>\n</div>\n", styles: ["table{width:100%}.dynamictable{box-shadow:none!important}.button-span,.mat-button-span{width:100%}.mat-button-span ::ng-deep .mat-button-toggle{margin-right:5px;border:1px solid #ccc;align-items:center;width:35px;height:35px}.mat-button-span ::ng-deep .mat-button-toggle-group-appearance-standard{border-radius:1px;border:none}.mat-button-span ::ng-deep .mat-button-toggle-label-content{line-height:34px;padding:0!important}.mat-button-span .approve-btn{background-color:#fff!important;color:#34c759!important;border-radius:4px}.mat-button-span .approve-btn:hover{background-color:#34c759!important;color:#fff!important}.mat-button-span .reject-btn{background-color:#fff!important;color:#f6685e!important;border-radius:4px}.mat-button-span .reject-btn:hover{background-color:#f6685e!important;color:#fff!important}.noResultsContainer{width:100%;height:50vh;display:flex;align-items:center;justify-content:center;background:#fff}.noResultsContainer .noSearchResultsText{font-weight:400;color:#000;opacity:.5;font-size:150%}.mat-form-field{font-size:14px;width:100%}tr.example-detail-row{height:0!important;background:#f2f2f2}tr.example-detail-row:hover{background:none!important;cursor:auto!important}tr.example-element-row:not(.example-expanded-row):hover{background:whitesmoke}tr.example-element-row:not(.example-expanded-row):active{background:#efefef}.example-element-row td{border-bottom-width:0}.example-element-detail{overflow:hidden;display:flex;background:#f2f2f2}.example-element-diagram{min-width:80px;border:2px solid black;padding:8px;font-weight:lighter;margin:8px 0;height:104px}.example-element-symbol{font-weight:700;font-size:40px;line-height:normal}.example-element-description{padding:16px}.example-element-description-attribution{opacity:.5}.headerRow{background:rgb(239,242,255)!important}.headerCell{display:flex;align-items:center;justify-content:space-between}.headerCellLabel{padding-left:5px;text-align:left;justify-content:space-between;align-items:center;align-content:center}button.mat-menu-item{width:100%;line-height:25px!important;height:35px!important;font-size:small}th.mat-header-cell{padding-left:10px;font-weight:500;color:#000;font-size:14px;font-family:Roboto;border-top:.5px solid #d8d8d8}th.mat-header-cell:last-child{border-right:.5px solid #d8d8d8}td.mat-cell{padding-left:16px;padding-right:16px!important}tr.mat-row{border:0px!important;cursor:pointer}tr.mat-row:hover{background:#f2f2f2}tr.mat-footer-row{border:1px solid #f2f2f2!important}.mat-paginator{display:block;height:50px!important;background:#f2f2f2}.tableFilterRow{align-items:center;justify-content:space-between}.searchbar{width:45%}::ng-deep .mat-form-field-wrapper{padding-bottom:0!important}.root{background:#f2f2f2}.rowselect-checkbox{padding-left:24px;padding-right:24px;width:2%;background:#eff2ff}.action-icons-display-flex{justify-content:flex-end;display:flex}.actions-column{min-width:20px!important;width:20px!important;text-align:right;padding-right:10px!important;padding-left:10px!important}.tableMainContent{background:#fff;border-left:.6px solid #b0b0b0}.tableMain{background:#fff;overflow:auto!important}.tableMain ::ng-deep .mat-sort-header-container{display:block!important}.tableMain ::ng-deep .mat-sort-header-content{display:block!important}.tableFullWidth{border-left:none!important}.leftPanel{padding:10px;width:20%;height:100%}.menu-content{height:inherit;width:inherit;background:lightgoldenrodyellow;padding:10px;margin:10px}.columnConfigListItem{font-size:10pt;height:25px!important}:host ::ng-deep .mat-sort-header-arrow{display:none!important}.table-column{min-width:140px}.mat-menu-button{width:150px}.action-icons{margin-top:2px;margin-right:5px!important;font-size:20px}.mat-table{display:block;width:100%;overflow:auto;max-height:95vh}.displayFlex{display:flex;align-items:center}.red-text{color:#f6685e}.more-actions{width:30px;height:30px;line-height:30px}.table-buttons{background-color:#fff;border:1px solid #3d5afe;color:#3d5afe;width:100%}.slide-toggle ::ng-deep .mat-slide-toggle-bar{width:36px;height:20px!important;border-radius:25px!important}.slide-toggle ::ng-deep .mat-slide-toggle.mat-checked .mat-slide-toggle-bar{background-color:#34c759!important}.slide-toggle ::ng-deep .mat-slide-toggle-thumb-container{top:2px!important;left:3px!important}.slide-toggle ::ng-deep .mat-slide-toggle-thumb{height:15px!important;width:15px!important}.slide-toggle ::ng-deep .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background-color:#fff!important}.space-between{display:flex;justify-content:space-between}.highlight{background:whitesmoke}.date-picker{display:flex;justify-content:space-between}.date-picker ::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline{color:transparent!important}.date-picker ::ng-deep .mat-form-field-appearance-outline .mat-form-field-flex{padding:0!important}.date-picker ::ng-deep .mat-form-field-infix{width:100%!important}.date-picker mat-icon{font-size:30px;line-height:63px;color:#0000008a}.width-100{width:100%}.dropdown{display:flex;justify-content:space-between;align-items:center}.dropdown .select-text{color:#9e9e9e}.dropdown .arrow{float:right}.dropdown mat-icon{font-size:30px;line-height:35px;color:#0000008a}::ng-deep .mat-menu-submenu-icon{display:none!important}.disabled{background-color:#e0e0e0}.not-disabled{background-color:#fff}.table-column .mat-tooltip-parent{display:flex;align-items:center}.table-column ::ng-deep .mat-tooltip-panel-above .mat-tooltip{overflow:visible;margin-bottom:8px}.table-column ::ng-deep .mat-tooltip-panel-above .mat-tooltip:before{content:\"\";display:block;position:absolute;top:100%;border-style:solid;border-color:rgba(97,97,97,.9) transparent transparent transparent;border-width:6px;left:calc(50% - 6px)}\n"], components: [{ type: i4.TableFilterPanelComponent, selector: "cwp-table-filter-panel", inputs: ["configOptions"] }, { type: i5.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i6.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "aria-describedby", "id", "required", "labelPosition", "name", "value", "checked", "disabled", "indeterminate"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i7.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "mat-sort-header", "arrowPosition", "start", "sortActionDescription", "disableClear"], exportAs: ["matSortHeader"] }, { type: i8.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i9.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i10.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { type: i10.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { type: i11.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "aria-describedby", "required", "checked"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i12.MatButtonToggle, selector: "mat-button-toggle", inputs: ["disableRipple", "aria-label", "aria-labelledby", "id", "name", "value", "tabIndex", "appearance", "checked", "disabled"], outputs: ["change"], exportAs: ["matButtonToggle"] }, { type: i5.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i5.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i13.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortActive", "matSortStart", "matSortDirection", "matSortDisableClear"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i15.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i14.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i5.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i5.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i5.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i5.MatCellDef, selector: "[matCellDef]" }, { type: i5.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i15.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i10.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { type: i16.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i12.MatButtonToggleGroup, selector: "mat-button-toggle-group", inputs: ["appearance", "name", "vertical", "value", "multiple", "disabled"], outputs: ["valueChange", "change"], exportAs: ["matButtonToggleGroup"] }, { type: i10.MatMenuContent, selector: "ng-template[matMenuContent]" }, { type: i5.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i5.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }], pipes: { "dynamicTypePipe": i17.DynamicTypePipe }, animations: [
        trigger('detailExpand', [
            state('collapsed', style({ height: '0px', minHeight: '0' })),
            state('expanded', style({ height: '*' })),
            transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))
        ])
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DynamictableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cwp-dynamictable', animations: [
                        trigger('detailExpand', [
                            state('collapsed', style({ height: '0px', minHeight: '0' })),
                            state('expanded', style({ height: '*' })),
                            transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))
                        ])
                    ], template: "<div>\n  <div class=\"leftPanel\" *ngIf=\"configOptions.displayFilterPanel\">\n    <cwp-table-filter-panel\n      [configOptions]=\"configOptions\"\n      (eventsHandler)=\"handleEvent($event)\"\n    ></cwp-table-filter-panel>\n  </div>\n  <div\n    [ngClass]=\"\n      configOptions.displayFilterPanel ? 'tableMainContent' : 'tableFullWidth'\n    \"\n  >\n    <div class=\"tableMain\" id=\"tableMain\" (scroll)=\"onTableScroll($event)\">\n      <table\n        id=\"matTableMain\"\n        mat-table\n        class=\"mat-elevation-z0 dynamictable\"\n        [dataSource]=\"dataSource\"\n        matSort\n        multiTemplateDataRows\n        cdkDropList\n        [ngStyle]=\"{\n          width: configOptions.tableWidth,\n          'max-height': configOptions.tableHeight\n        }\"\n        cdkDropListOrientation=\"horizontal\"\n        (cdkDropListDropped)=\"drop($event)\"\n        (scroll)=\"onTableScroll($event)\"\n      >\n        <!-- Checkbox Column -->\n        <ng-container\n          matColumnDef=\"selected\"\n          *ngIf=\"configOptions.enableRowsSelection\"\n        >\n          <th mat-header-cell *matHeaderCellDef class=\"w-50 rowselect-checkbox\">\n            <mat-checkbox\n              (change)=\"$event ? masterToggle() : null\"\n              [checked]=\"selection.hasValue() && isAllSelected()\"\n              [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n              [aria-label]=\"checkboxLabel()\"\n            >\n            </mat-checkbox>\n          </th>\n          <td mat-cell *matCellDef=\"let row\" class=\"w-50\">\n            <mat-checkbox\n              [disabled]=\"\n                configOptions.enableRowsSelection &&\n                !evaluateCondition(row, configOptions.enableRowLevelActions)\n              \"\n              (click)=\"$event.stopPropagation()\"\n              (change)=\"$event ? toggleRowSelect(row) : null\"\n              [checked]=\"\n                configOptions.enableRowsSelection &&\n                evaluateCondition(row, configOptions.enableRowLevelActions) &&\n                selection.isSelected(row)\n              \"\n              [aria-label]=\"checkboxLabel(row)\"\n            >\n            </mat-checkbox>\n          </td>\n        </ng-container>\n        <!-- Other Dynamic Columns -->\n        <ng-container\n          [matColumnDef]=\"column.id\"\n          [sticky]=\"isSticky(stickyColumns, column.id)\"\n          [stickyEnd]=\"isStickyEnd(stickyEndColumns, column.id)\"\n          *ngFor=\"let column of displayedColumns\"\n        >\n          <th\n            mat-header-cell\n            cdkDrag\n            [cdkDragDisabled]=\"!column.movable\"\n            *matHeaderCellDef\n            class=\"tableHeaderCell table-column\"\n            [disableClear]=\"true\"\n            mat-sort-header\n            [disabled]=\"!column.sortable\"\n          >\n            <!-- <th mat-header-cell cdkDrag [cdkDragDisabled]=\"column.disabled\" *matHeaderCellDef class=\"tableHeaderCell\"> -->\n            <div class=\"headerCell\">\n              <div id=\"dynamictableHeadCellName\" class=\"headerCellLabel\">\n                {{ column.displayName }}\n                <span *ngIf=\"column.sortable === true\">\n                  <span\n                    id=\"dynamictableSortAsc\"\n                    *ngIf=\"\n                      sort &&\n                      sort.active === column.id &&\n                      sort.direction == 'asc'\n                    \"\n                  >\n                    &#8593;\n                  </span>\n                  <span\n                    id=\"dynamictableSortDesc\"\n                    *ngIf=\"\n                      sort &&\n                      sort.active === column.id &&\n                      sort.direction == 'desc'\n                    \"\n                  >\n                    &#8595;\n                  </span>\n                  <span *ngIf=\"sort && sort.active !== column.id\">&#8645;</span>\n                </span>\n              </div>\n              <div class=\"headerCellActions\" (click)=\"$event.stopPropagation()\">\n                <button\n                  id=\"dynamictableMoreOption\"\n                  type=\"button\"\n                  mat-icon-button\n                  [matMenuTriggerFor]=\"menu\"\n                  *ngIf=\"column.showMenuOptions\"\n                  aria-label=\"icon-button with a menu\"\n                  (click)=\"$event.stopPropagation()\"\n                  aria-label=\"More Options\"\n                >\n                  <mat-icon>more_horiz</mat-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n                  <button\n                    id=\"dynamictableHideCol\"\n                    type=\"button\"\n                    mat-menu-item\n                    (click)=\"hideColumn(column.id)\"\n                    *ngIf=\"column.hideable\"\n                  >\n                    Hide Column\n                  </button>\n                  <button\n                    id=\"dynamictableMoveLeft\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"column.movable\"\n                    (click)=\"moveLeft(column.id)\"\n                  >\n                    Move Left\n                  </button>\n                  <button\n                    id=\"dynamictableMoveRight\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"column.movable\"\n                    (click)=\"moveRight(column.id)\"\n                  >\n                    Move Right\n                  </button>\n                  <button\n                    id=\"dynamictableStick\"\n                    type=\"button\"\n                    mat-menu-item\n                    (click)=\"stick(column.id)\"\n                    *ngIf=\"\n                      !isSticky(stickyColumns, column.id) && column.stickable\n                    \"\n                  >\n                    Stick\n                  </button>\n                  <!-- <button\n                    mat-menu-item\n                    (click)=\"stickToEnd(column.id)\"\n                    *ngIf=\"!isStickyEnd(stickyColumns, column.id)\"\n                  >\n                    Stick to End\n                  </button> -->\n                  <button\n                    id=\"dynamictableColStickable\"\n                    type=\"button\"\n                    mat-menu-item\n                    (click)=\"unstick(column.id)\"\n                    *ngIf=\"\n                      (isSticky(stickyColumns, column.id) ||\n                        isStickyEnd(stickyEndColumns, column.id)) &&\n                      column.stickable\n                    \"\n                  >\n                    Un-stick\n                  </button>\n                  <button\n                    id=\"dynamictableAddGroup\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"\n                      column.visible &&\n                      column.groupable &&\n                      !isGrouped(column.id)\n                    \"\n                    [disabled]=\"this.configOptions.groupByColumns.length >= 3\"\n                    (click)=\"addGroup(column, $event)\"\n                  >\n                    Group Rows by this Column\n                  </button>\n                  <button\n                    id=\"dynamictableRemoveGroup\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"\n                      column.visible && column.groupable && isGrouped(column.id)\n                    \"\n                    (click)=\"removeGroup(column, $event)\"\n                  >\n                    Un-group this Column\n                  </button>\n                </mat-menu>\n              </div>\n            </div>\n          </th>\n          <!-- <td _ngcontent-pqd-c296=\"\" role=\"cell\" mat-cell=\"\" class=\"mat-cell cdk-cell cdk-column-name mat-column-name ng-tns-c296-0 ng-star-inserted\">\n            </td>\n         -->\n          <td\n            mat-cell\n            *matCellDef=\"let element; let i = dataIndex\"\n            [ngStyle]=\"evaluateExpression(element, column)\"\n            [attr.rowspan]=\"getRowSpan(column.id, i)\"\n            [style.display]=\"getRowSpan(column.id, i) ? '' : 'none'\"\n            class=\"table-column\"\n            (click)=\"onCellClick(element, column.id, column.controlType)\"\n            id=\"{{ column.id }}\"\n          >\n            <div\n              class=\"displayFlex\"\n              *ngIf=\"column && element\"\n              [ngClass]=\"{\n                disabled:\n                  element[column.controlValue?.dependentFieldId] === true &&\n                  column.controlValue.disableBackground === true,\n                'not-disabled':\n                  element[column.controlValue?.dependentFieldId] === false &&\n                  column.controlValue.disableBackground === true\n              }\"\n            >\n              <!-- <span\n                *ngIf=\"\n                  column.hasPreTextImage &&\n                  element.preTextImageConfig &&\n                  element.preTextImageConfig.logoAvialable === false\n                \"\n                [ngStyle]=\"element.preTextImageConfig.style\"\n              >\n                <avatar [text]=\"element.name\"></avatar>\n              </span> -->\n\n              <img\n                id=\"dynamictableImg\"\n                [src]=\"element.preTextImage.image\"\n                [ngStyle]=\"element.preTextImage.style\"\n                *ngIf=\"\n                  column.hasPreTextImage &&\n                  element.preTextImage &&\n                  element.preTextImage.image &&\n                  element.preTextImage.condition &&\n                  evaluateCondition(element, element.preTextImage)\n                \"\n                alt=\"Pre Image\"\n              />\n              <span\n                *ngIf=\"column.controlType === 'string'\"\n                [ngClass]=\"column?.hasMatToolTip ? 'mat-tooltip-parent' : ''\"\n              >\n                <span\n                  id=\"dynamictableColType\"\n                  *ngIf=\"!isArray(element[column.id])\"\n                  [ngStyle]=\"\n                    getConditionalStyles(column.titleStyle, element, column)\n                  \"\n                  (click)=\"onCellClick(element, column.id, column.controlType)\"\n                  #tooltip=\"matTooltip\"\n                  matTooltip=\"{{ element[column.id] }}\"\n                  matTooltipPosition=\"above\"\n                  [matTooltipDisabled]=\"!column.hasMatToolTip\"\n                >\n                  {{ element[column.id] | dynamicTypePipe : column.type }}\n                  <span\n                    *ngIf=\"column.hasRightElement\"\n                    id=\"dynamictableRightElement\"\n                    [innerHTML]=\"element.rightElement\"\n                  >\n                  </span>\n                </span>\n                <span\n                  *ngIf=\"isArray(element[column.id])\"\n                  [ngStyle]=\"column.titleStyle\"\n                >\n                  <span\n                    id=\"dynamictableItem\"\n                    *ngFor=\"let item of element[column.id]; last as isLast\"\n                    (click)=\"onCellClick(element, column.id, item)\"\n                  >\n                    {{ item }}<span *ngIf=\"!isLast\">, </span></span\n                  > </span\n                ><br />\n                <span\n                  id=\"dynamictableSubtitle\"\n                  *ngIf=\"column.hasSubtitle\"\n                  [ngStyle]=\"\n                    element[column.subtitleColumn] !== ''\n                      ? column.subtitleStyle\n                      : ''\n                  \"\n                >\n                  {{\n                    element[column.subtitleColumn]\n                      | dynamicTypePipe : column.type\n                  }}\n                </span>\n                <span\n                  *ngIf=\"column.hasBelowElement\"\n                  id=\"dynamictableSubtitleElement\"\n                >\n                  <br />\n                  <span [innerHTML]=\"element.belowElement\"></span>\n                </span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'slide-toggle'\">\n                <span class=\"slide-toggle\">\n                  <mat-slide-toggle\n                    [checked]=\"element[column.id]\"\n                    (change)=\"onToggleChange($event)\"\n                  ></mat-slide-toggle>\n                </span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'html'\">\n                <span [innerHTML]=\"element[column.id]\"></span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'button'\" class=\"button-span\">\n                <button\n                  id=\"dynamictableColValue\"\n                  type=\"button\"\n                  mat-stroked-button\n                  class=\"table-buttons\"\n                  *ngIf=\"!element[column.id]; else freeText\"\n                >\n                  {{ column.controlValue }}\n                </button>\n                <ng-template #freeText>\n                  <span id=\"dynamictableColId\">\n                    {{ element[column.id] }}\n                  </span>\n                </ng-template>\n              </span>\n\n              <span\n                *ngIf=\"column.controlType === 'button-toggle'\"\n                class=\"mat-button-span\"\n              >\n                <span\n                  *ngIf=\"column?.controlValue.length && !element[column.id]\"\n                >\n                  <ng-container *ngFor=\"let button of column?.controlValue\">\n                    <mat-button-toggle-group\n                      #group=\"matButtonToggleGroup\"\n                      (change)=\"onValChange(element, group.value)\"\n                    >\n                      <mat-button-toggle\n                        [value]=\"button.value\"\n                        class=\"{{ button.class }}\"\n                      >\n                        <mat-icon *ngIf=\"button.isIcon\">\n                          {{ button.iconName }}\n                        </mat-icon>\n                      </mat-button-toggle>\n                    </mat-button-toggle-group>\n                  </ng-container>\n                </span>\n                <span id=\"dynamictableColId\" *ngIf=\"element[column.id]\">\n                  {{ element[column.id] }}\n                </span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'menu'\" class=\"button-span\">\n                <button\n                  mat-stroked-button\n                  class=\"table-buttons\"\n                  [matMenuTriggerFor]=\"menu\"\n                  *ngIf=\"!element[column.id]; else freeText\"\n                >\n                  {{ column.controlValue['buttonName'] }}\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                  <ng-template matMenuContent>\n                    <button\n                      mat-menu-item\n                      (click)=\"onMenuButtonClick(element, column.id, btn)\"\n                      *ngFor=\"let btn of column.controlValue['menuButtonNames']\"\n                      class=\"mat-menu-button\"\n                    >\n                      {{ btn }}\n                    </button>\n                  </ng-template>\n                </mat-menu>\n                <ng-template #freeText>\n                  <span>\n                    {{ element[column.id] }}\n                  </span>\n                </ng-template>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'space-between'\">\n                <span class=\"space-between\" [ngStyle]=\"column.titleStyle\">\n                  <div\n                    *ngFor=\"\n                      let value of getDisplayValues(\n                        element[column.id],\n                        column.controlValue\n                      )\n                    \"\n                  >\n                    {{ value }}\n                  </div>\n                </span>\n              </span>\n\n              <span\n                *ngIf=\"column.controlType === 'dropdown'\"\n                [id]=\"element.id\"\n                class=\"width-100\"\n              >\n                <span\n                  class=\"dropdown\"\n                  *ngIf=\"\n                    getDisplayType(element, column, column.controlValue) ===\n                    'dropdown'\n                  \"\n                >\n                  <span\n                    id=\"dynamictableDropDown\"\n                    *ngIf=\"element[column.id] !== undefined\"\n                    class=\"dropdown-value\"\n                  >\n                    {{ element[column.id] }}\n                  </span>\n                  <span\n                    id=\"dynamictableSelect\"\n                    *ngIf=\"element[column.id] === undefined\"\n                    class=\"select-text\"\n                  >\n                    Select\n                  </span>\n                  <span class=\"arrow\">\n                    <mat-icon>arrow_drop_down</mat-icon>\n                  </span>\n                </span>\n                <span\n                  id=\"dynamictableText\"\n                  *ngIf=\"\n                    getDisplayType(element, column, column.controlValue) ===\n                    'text'\n                  \"\n                >\n                  {{ element[column.id] }}\n                </span>\n              </span>\n\n              <!-- <span\n                *ngIf=\"\n                  column.hasPostTextImage &&\n                  element.postTextImageConfig &&\n                  element.postTextImageConfig.logoAvialable === false\n                \"\n                [ngStyle]=\"element.postTextImageConfig.style\"\n              >\n                <avatar [text]=\"element.name\"></avatar>\n              </span> -->\n\n              <img\n                [src]=\"element.postTextImage.image\"\n                [ngStyle]=\"element.postTextImage.style\"\n                *ngIf=\"\n                  column.hasPostTextImage &&\n                  element.postTextImage &&\n                  element.postTextImage.image &&\n                  element.postTextImage.condition &&\n                  evaluateCondition(element, element.postTextImage)\n                \"\n                alt=\"Post Image\"\n              />\n            </div>\n          </td>\n        </ng-container>\n        <ng-container\n          matColumnDef=\"actions\"\n          [stickyEnd]=\"true\"\n          *ngIf=\"configOptions.displayActionsColumn\"\n        >\n          <th\n            id=\"dynamictableAction\"\n            mat-header-cell\n            *matHeaderCellDef\n            class=\"w-50 actions-column tableHeaderCell table-column\"\n          >\n            Actions\n          </th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-icons-display-flex\">\n              <ng-container\n                *ngIf=\"configOptions.rowLevelActions.iconAction; let iconAction\"\n              >\n                <button\n                  id=\"dynamictableRowLevelAction\"\n                  type=\"button\"\n                  mat-icon-button\n                  class=\"more-actions\"\n                  (click)=\"onRowLevelActionIconClick(iconAction, row)\"\n                  aria-label=\"Row Level Action\"\n                >\n                  <mat-icon\n                    id=\"dynamictableIconToggleOn\"\n                    *ngIf=\"row[iconAction.property]\"\n                    [ngStyle]=\"iconAction.styleToggleOn\"\n                    (click)=\"onRowLevelActionIconClick(iconAction, row)\"\n                    class=\"action-icons\"\n                    >{{ iconAction.iconToggleOn }}\n                  </mat-icon>\n                  <mat-icon\n                    id=\"dynamictableToggleOff\"\n                    *ngIf=\"!row[iconAction.property]\"\n                    [ngStyle]=\"iconAction.styleToggleOff\"\n                    (click)=\"onRowLevelActionIconClick(iconAction, row)\"\n                    class=\"action-icons\"\n                    >{{ iconAction.iconToggleOff }}</mat-icon\n                  >\n                </button>\n              </ng-container>\n              <button\n                id=\"dynamictableActionMenu\"\n                type=\"button\"\n                mat-icon-button\n                [matMenuTriggerFor]=\"actionsMenu\"\n                class=\"more-actions\"\n                [disabled]=\"\n                  !evaluateCondition(row, configOptions.enableRowLevelActions)\n                \"\n                aria-label=\"More Options\"\n              >\n                <mat-icon id=\"dynamictableMoreIcon\">more_horiz</mat-icon>\n              </button>\n              <mat-menu #actionsMenu=\"matMenu\">\n                <ng-container\n                  *ngFor=\"\n                    let action of configOptions.rowLevelActions.menuActions\n                  \"\n                >\n                  <ng-container *ngIf=\"action.type !== 'menu'\">\n                    <button\n                      id=\"dynamictableActionClick\"\n                      type=\"button\"\n                      mat-menu-item\n                      *ngIf=\"\n                        !action.condition ||\n                        (action.condition && evaluateCondition(row, action))\n                      \"\n                      (click)=\"onRowLevelActionClick(action, row)\"\n                    >\n                      <mat-icon\n                        id=\"dynamictableActionIcon\"\n                        class=\"action-icons\"\n                        [ngClass]=\"{\n                          'red-text':\n                            action.title === 'Delete' ||\n                            action.title === 'Deactivate' ||\n                            action.title === 'Archive'\n                        }\"\n                        *ngIf=\"action.icon\"\n                        >{{ action.icon }}</mat-icon\n                      >\n                      <span\n                        id=\"dynamictableActionTitle\"\n                        [ngClass]=\"{\n                          'red-text':\n                            action.title === 'Delete' ||\n                            action.title === 'Deactivate' ||\n                            action.title === 'Archive'\n                        }\"\n                        >{{ action.title }}</span\n                      >\n                    </button>\n                  </ng-container>\n                  <ng-container *ngIf=\"action.type === 'menu'\">\n                    <button\n                      id=\"dynamictableActionClick\"\n                      type=\"button\"\n                      mat-menu-item\n                      [matMenuTriggerFor]=\"nestedMenu\"\n                      *ngIf=\"\n                        !action.condition ||\n                        (action.condition && evaluateCondition(row, action))\n                      \"\n                    >\n                      <span id=\"dynamictableActionTitle\">{{\n                        action.title\n                      }}</span>\n                    </button>\n                    <mat-menu #nestedMenu=\"matMenu\">\n                      <button\n                        mat-menu-item\n                        *ngFor=\"let subMenu of action.menuValues\"\n                        (click)=\"onRowLevelActionClick(action, row, subMenu)\"\n                      >\n                        {{ subMenu }}\n                      </button>\n                    </mat-menu>\n                  </ng-container>\n                </ng-container>\n              </mat-menu>\n            </div>\n          </td>\n        </ng-container>\n        <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n        <ng-container matColumnDef=\"expandedDetail\">\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            [attr.colspan]=\"columnsToDisplay.length\"\n          >\n            <div\n              class=\"example-element-detail\"\n              [@detailExpand]=\"\n                element == expandedElement ? 'expanded' : 'collapsed'\n              \"\n            >\n              <div class=\"example-element-diagram\">\n                <div\n                  id=\"dynamictableElementName\"\n                  class=\"example-element-position\"\n                >\n                  {{ element.name }}\n                </div>\n                <div\n                  id=\"dynamictableElementProgress\"\n                  class=\"example-element-symbol\"\n                >\n                  {{ element.progress }}\n                </div>\n                <div\n                  id=\"dynamictableElementExample\"\n                  class=\"example-element-name\"\n                >\n                  {{ element.fruit }}\n                </div>\n                <div id=\"dynamictableElementId\" class=\"example-element-weight\">\n                  {{ element.id }}\n                </div>\n              </div>\n              <div\n                id=\"dynamictableElementDesc\"\n                class=\"example-element-description\"\n              >\n                {{ element.name }}\n                <span class=\"example-element-description-attribution\">\n                  -- Wikipedia\n                </span>\n              </div>\n            </div>\n          </td>\n        </ng-container>\n        <tr\n          mat-header-row\n          *matHeaderRowDef=\"columnsToDisplay; sticky: true\"\n          class=\"headerRow\"\n        ></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let row; columns: columnsToDisplay\"\n          [class.example-expanded-row]=\"expandedElement === row\"\n          (click)=\"\n            expandedElement = expandedElement === row ? null : row;\n            highlight(row)\n          \"\n          [ngClass]=\"{ highlight: selectedRowIndex == row?.id }\"\n        ></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let row; columns: ['expandedDetail']; when: customWhen\"\n          class=\"example-detail-row\"\n        ></tr>\n      </table>\n      <div *ngIf=\"!dataSource.data.length\" class=\"noResultsContainer\">\n        <span id=\"dynamictableNoDataFound\" class=\"noSearchResultsText\">\n          {{\n            configOptions?.noDataText\n              ? configOptions?.noDataText\n              : 'No Data Found'\n          }}\n        </span>\n      </div>\n    </div>\n    <mat-paginator\n      *ngIf=\"configOptions.enablePagination\"\n      [pageSizeOptions]=\"[10, 25, 50, 75, 100]\"\n      aria-label=\"Select Page\"\n    ></mat-paginator>\n  </div>\n</div>\n", styles: ["table{width:100%}.dynamictable{box-shadow:none!important}.button-span,.mat-button-span{width:100%}.mat-button-span ::ng-deep .mat-button-toggle{margin-right:5px;border:1px solid #ccc;align-items:center;width:35px;height:35px}.mat-button-span ::ng-deep .mat-button-toggle-group-appearance-standard{border-radius:1px;border:none}.mat-button-span ::ng-deep .mat-button-toggle-label-content{line-height:34px;padding:0!important}.mat-button-span .approve-btn{background-color:#fff!important;color:#34c759!important;border-radius:4px}.mat-button-span .approve-btn:hover{background-color:#34c759!important;color:#fff!important}.mat-button-span .reject-btn{background-color:#fff!important;color:#f6685e!important;border-radius:4px}.mat-button-span .reject-btn:hover{background-color:#f6685e!important;color:#fff!important}.noResultsContainer{width:100%;height:50vh;display:flex;align-items:center;justify-content:center;background:#fff}.noResultsContainer .noSearchResultsText{font-weight:400;color:#000;opacity:.5;font-size:150%}.mat-form-field{font-size:14px;width:100%}tr.example-detail-row{height:0!important;background:#f2f2f2}tr.example-detail-row:hover{background:none!important;cursor:auto!important}tr.example-element-row:not(.example-expanded-row):hover{background:whitesmoke}tr.example-element-row:not(.example-expanded-row):active{background:#efefef}.example-element-row td{border-bottom-width:0}.example-element-detail{overflow:hidden;display:flex;background:#f2f2f2}.example-element-diagram{min-width:80px;border:2px solid black;padding:8px;font-weight:lighter;margin:8px 0;height:104px}.example-element-symbol{font-weight:700;font-size:40px;line-height:normal}.example-element-description{padding:16px}.example-element-description-attribution{opacity:.5}.headerRow{background:rgb(239,242,255)!important}.headerCell{display:flex;align-items:center;justify-content:space-between}.headerCellLabel{padding-left:5px;text-align:left;justify-content:space-between;align-items:center;align-content:center}button.mat-menu-item{width:100%;line-height:25px!important;height:35px!important;font-size:small}th.mat-header-cell{padding-left:10px;font-weight:500;color:#000;font-size:14px;font-family:Roboto;border-top:.5px solid #d8d8d8}th.mat-header-cell:last-child{border-right:.5px solid #d8d8d8}td.mat-cell{padding-left:16px;padding-right:16px!important}tr.mat-row{border:0px!important;cursor:pointer}tr.mat-row:hover{background:#f2f2f2}tr.mat-footer-row{border:1px solid #f2f2f2!important}.mat-paginator{display:block;height:50px!important;background:#f2f2f2}.tableFilterRow{align-items:center;justify-content:space-between}.searchbar{width:45%}::ng-deep .mat-form-field-wrapper{padding-bottom:0!important}.root{background:#f2f2f2}.rowselect-checkbox{padding-left:24px;padding-right:24px;width:2%;background:#eff2ff}.action-icons-display-flex{justify-content:flex-end;display:flex}.actions-column{min-width:20px!important;width:20px!important;text-align:right;padding-right:10px!important;padding-left:10px!important}.tableMainContent{background:#fff;border-left:.6px solid #b0b0b0}.tableMain{background:#fff;overflow:auto!important}.tableMain ::ng-deep .mat-sort-header-container{display:block!important}.tableMain ::ng-deep .mat-sort-header-content{display:block!important}.tableFullWidth{border-left:none!important}.leftPanel{padding:10px;width:20%;height:100%}.menu-content{height:inherit;width:inherit;background:lightgoldenrodyellow;padding:10px;margin:10px}.columnConfigListItem{font-size:10pt;height:25px!important}:host ::ng-deep .mat-sort-header-arrow{display:none!important}.table-column{min-width:140px}.mat-menu-button{width:150px}.action-icons{margin-top:2px;margin-right:5px!important;font-size:20px}.mat-table{display:block;width:100%;overflow:auto;max-height:95vh}.displayFlex{display:flex;align-items:center}.red-text{color:#f6685e}.more-actions{width:30px;height:30px;line-height:30px}.table-buttons{background-color:#fff;border:1px solid #3d5afe;color:#3d5afe;width:100%}.slide-toggle ::ng-deep .mat-slide-toggle-bar{width:36px;height:20px!important;border-radius:25px!important}.slide-toggle ::ng-deep .mat-slide-toggle.mat-checked .mat-slide-toggle-bar{background-color:#34c759!important}.slide-toggle ::ng-deep .mat-slide-toggle-thumb-container{top:2px!important;left:3px!important}.slide-toggle ::ng-deep .mat-slide-toggle-thumb{height:15px!important;width:15px!important}.slide-toggle ::ng-deep .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background-color:#fff!important}.space-between{display:flex;justify-content:space-between}.highlight{background:whitesmoke}.date-picker{display:flex;justify-content:space-between}.date-picker ::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline{color:transparent!important}.date-picker ::ng-deep .mat-form-field-appearance-outline .mat-form-field-flex{padding:0!important}.date-picker ::ng-deep .mat-form-field-infix{width:100%!important}.date-picker mat-icon{font-size:30px;line-height:63px;color:#0000008a}.width-100{width:100%}.dropdown{display:flex;justify-content:space-between;align-items:center}.dropdown .select-text{color:#9e9e9e}.dropdown .arrow{float:right}.dropdown mat-icon{font-size:30px;line-height:35px;color:#0000008a}::ng-deep .mat-menu-submenu-icon{display:none!important}.disabled{background-color:#e0e0e0}.not-disabled{background-color:#fff}.table-column .mat-tooltip-parent{display:flex;align-items:center}.table-column ::ng-deep .mat-tooltip-panel-above .mat-tooltip{overflow:visible;margin-bottom:8px}.table-column ::ng-deep .mat-tooltip-panel-above .mat-tooltip:before{content:\"\";display:block;position:absolute;top:100%;border-style:solid;border-color:rgba(97,97,97,.9) transparent transparent transparent;border-width:6px;left:calc(50% - 6px)}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatSnackBar }, { type: i0.ChangeDetectorRef }, { type: i2.DynamictableFilterService }, { type: i3.DomSanitizer }, { type: i2.DynamictableScrollerService }]; }, propDecorators: { paginator: [{
                type: ViewChild,
                args: [MatPaginator]
            }], sort: [{
                type: ViewChild,
                args: [MatSort]
            }], configOptions: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], fetchDataCallback: [{
                type: Output
            }], rowLevelActionHandler: [{
                type: Output
            }], cellClickActionHandler: [{
                type: Output
            }], onConfigOptionsChange: [{
                type: Output
            }], onToggleChangeHandler: [{
                type: Output
            }], onSelectButtonToggle: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,