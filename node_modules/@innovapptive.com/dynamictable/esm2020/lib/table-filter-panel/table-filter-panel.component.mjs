import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { Constants } from '../constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/snack-bar";
import * as i2 from "../dynamictable.service";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/autocomplete";
import * as i6 from "@angular/material/core";
import * as i7 from "@angular/material/list";
import * as i8 from "@angular/material/checkbox";
import * as i9 from "@angular/material/input";
import * as i10 from "@angular/forms";
import * as i11 from "@angular/common";
export class TableFilterPanelComponent {
    constructor(_snackBar, changeDetectorRefs, dynamictableFilterService) {
        this._snackBar = _snackBar;
        this.changeDetectorRefs = changeDetectorRefs;
        this.dynamictableFilterService = dynamictableFilterService;
        this.horizontalPosition = 'center';
        this.verticalPosition = 'top';
        this.addGroupUpdate = new Subject();
        this.addColumnUpdate = new Subject();
        this.groupedColumns = new Array();
        this.visibleColumns = new Array();
        // Debounce search for add rowGroup.
        this.addGroupUpdate
            .pipe(debounceTime(50), distinctUntilChanged())
            .subscribe((value) => {
            if (value === '') {
                let _filtered = this.configOptions.allColumns.filter((x) => x.groupable && x.visible);
                this.filteredGroupableColumns = _filtered;
                this.changeDetectorRefs.detectChanges();
            }
            else {
                let _filtered = this.configOptions.allColumns.filter((column) => {
                    let index = this.groupedColumns.findIndex((x) => x.id === column.id);
                    return (index < 0 &&
                        column.visible &&
                        column.groupable &&
                        column.displayName
                            ?.toLowerCase()
                            ?.indexOf(value?.toLocaleLowerCase()) > -1);
                });
                this.filteredGroupableColumns = _filtered;
                this.changeDetectorRefs.detectChanges();
            }
        });
        // Debounce search for add columns.
        this.addColumnUpdate
            .pipe(debounceTime(50), distinctUntilChanged())
            .subscribe((value) => {
            if (value === '') {
                this.filteredAllColumns = this.configOptions.allColumns;
                this.changeDetectorRefs.detectChanges();
            }
            else {
                let _filtered = this.configOptions.allColumns.filter((column) => column.displayName
                    .toLocaleLowerCase()
                    .indexOf(value?.toLocaleLowerCase()) > -1);
                this.filteredAllColumns = _filtered;
                this.changeDetectorRefs.detectChanges();
            }
        });
    }
    refreshFilterPanel() {
        this.configOptions = { ...this.configOptions };
        this.groupableColumns = this.configOptions.allColumns.filter((column) => column['visible'] && column['groupable']);
        this.visibleColumns = this.configOptions.allColumns.filter((column) => column['visible']);
        this.groupedColumns = [];
        this.configOptions.groupByColumns.forEach((column) => {
            let index = this.groupableColumns.findIndex((x) => x.id === column);
            if (index > -1) {
                this.groupedColumns.push(this.groupableColumns[index]);
                this.groupableColumns.splice(index, 1);
            }
        });
        this.filteredGroupableColumns = this.groupableColumns;
        // let _filtered = this.configOptions.allColumns;//.filter(column => !column.visible);
        this.filteredAllColumns = this.configOptions.allColumns;
        this.displayedColumns = this.configOptions.allColumns.filter((column) => column['visible']);
        this.changeDetectorRefs.detectChanges();
    }
    displayFn(reportColumn) {
        return '';
    }
    ngOnInit() {
        this.refreshFilterPanel();
        this.subscription = this.dynamictableFilterService
            .getEventEmitter()
            .subscribe((eventData) => {
            this.handleEvent(eventData);
        });
    }
    ngOnChanges(changes) {
        if (changes &&
            changes['configOptions'] &&
            !changes['configOptions'].firstChange) {
            this.refreshFilterPanel();
        }
    }
    handleEvent(event) {
        if (event.eventType === Constants.REFRESH_FILTER_PANEL) {
            this.refreshFilterPanel();
        }
    }
    addGroup(column) {
        this.dynamictableFilterService.emitEvent({
            eventType: Constants.ADD_GROUP,
            data: column
        });
        this.groupSearchKey = '';
    }
    removeGroup(event, column) {
        event.stopPropagation();
        this.dynamictableFilterService.emitEvent({
            eventType: Constants.REMOVE_GROUP,
            data: column
        });
    }
    openSnackBar(message) {
        this._snackBar.open(message, '', {
            horizontalPosition: this.horizontalPosition,
            verticalPosition: this.verticalPosition,
            duration: 5000 // 5 milliseconds
        });
    }
    optionClicked(item) {
        item.visible = !item.visible;
        this.toggleColumnVisibility(item.visible, item.id);
    }
    toggleColumnVisibility(isChecked, columnId) {
        this.visibleColumns = this.configOptions.allColumns.filter((column) => column['visible']);
        if (!isChecked && this.visibleColumns.length == 1) {
            this.filteredAllColumns.forEach((col) => {
                if (col.id === columnId) {
                    col.visible = true;
                }
            });
            this.displayedColumns.forEach((col) => {
                if (col.id === columnId) {
                    col.visible = true;
                }
            });
            this.openSnackBar('Please make sure to have aleast one column in the report!');
            return;
        }
        this.dynamictableFilterService.emitEvent({
            eventType: isChecked ? Constants.ADD_COLUMN : Constants.REMOVE_COLUMN,
            data: { isChecked: isChecked, columnId: columnId }
        });
        this.columnSearchKey = '';
    }
}
TableFilterPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableFilterPanelComponent, deps: [{ token: i1.MatSnackBar }, { token: i0.ChangeDetectorRef }, { token: i2.DynamictableFilterService }], target: i0.ɵɵFactoryTarget.Component });
TableFilterPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TableFilterPanelComponent, selector: "cwp-table-filter-panel", inputs: { configOptions: "configOptions" }, usesOnChanges: true, ngImport: i0, template: "<div>\n  <div class=\"groupBySection\">\n    <label id=\"tableFilterPanelByField\"><b>Group by Fields</b></label\n    ><br />\n    <mat-form-field appearance=\"outline\" class=\"width-100 outline-fields\">\n      <mat-icon id=\"tableFilterPanelSearchIcon\" matPrefix>search</mat-icon>\n      <input\n        type=\"text\"\n        #inputTrigger\n        placeholder=\"Add Group\"\n        matInput\n        [matAutocomplete]=\"autoCompleteGroups\"\n        [(ngModel)]=\"groupSearchKey\"\n        (ngModelChange)=\"addGroupUpdate.next(inputTrigger.value)\"\n      />\n      <mat-autocomplete\n        #autoCompleteGroups=\"matAutocomplete\"\n        [displayWith]=\"displayFn\"\n        (optionSelected)=\"addGroup($event.option.value)\"\n      >\n        <mat-option\n          *ngFor=\"let item of filteredGroupableColumns\"\n          [disabled]=\"this.configOptions.groupByColumns.length >= 3\"\n          [value]=\"item\"\n        >\n          <div (click)=\"addGroup(item)\">\n            <span id=\"tableFilterPanelName\">{{ item.displayName }}</span>\n          </div>\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n    <mat-list role=\"list\" class=\"groupBySectionScroll\">\n      <mat-list-item\n        role=\"listitem\"\n        *ngFor=\"let column of groupedColumns\"\n        class=\"columnListItem\"\n      >\n        <div class=\"listItemContent\">\n          <span id=\"tableFilterPanelColName\" class=\"groupby-name\">\n            {{ column.displayName }}\n          </span>\n          <mat-icon\n            id=\"tableFilterPanelCloseIcon\"\n            class=\"smallIcon\"\n            (click)=\"removeGroup($event, column)\"\n          >\n            close\n          </mat-icon>\n        </div>\n      </mat-list-item>\n    </mat-list>\n    <p id=\"tableFilterPanelRows\" class=\"warning-group-message\">\n      Can add only upto 3 Rows\n    </p>\n  </div>\n  <div class=\"tableColumns\">\n    <label id=\"tableFilterPanelCol\"><b>Columns</b></label>\n    <br />\n    <mat-form-field appearance=\"outline\" class=\"width-100 outline-fields\">\n      <mat-icon id=\"tableFilterPanelSearch\" matPrefix>search</mat-icon>\n      <input\n        type=\"text\"\n        placeholder=\"Select Columns\"\n        matInput\n        #inputColumn\n        [matAutocomplete]=\"autoCompleteColumns\"\n        [(ngModel)]=\"columnSearchKey\"\n        (ngModelChange)=\"addColumnUpdate.next(inputColumn.value)\"\n      />\n      <mat-autocomplete\n        #autoCompleteColumns=\"matAutocomplete\"\n        [displayWith]=\"displayFn\"\n        (optionSelected)=\"optionClicked($event.option.value)\"\n      >\n        <mat-option *ngFor=\"let item of filteredAllColumns\" [value]=\"item\">\n          <div (click)=\"optionClicked(item)\">\n            <mat-checkbox\n              [checked]=\"item.visible\"\n              (change)=\"toggleColumnVisibility($event.checked, item.id)\"\n            >\n              {{ item.displayName }}\n            </mat-checkbox>\n          </div>\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n    <br />\n    <mat-list role=\"list\" class=\"tableColumnsScroll\">\n      <mat-list-item\n        role=\"listitem\"\n        *ngFor=\"let column of configOptions.allColumns\"\n        class=\"columnListItem\"\n      >\n        <div class=\"listItemContent\">\n          <mat-checkbox\n            disableRipple\n            (change)=\"toggleColumnVisibility($event.checked, column['id'])\"\n            [checked]=\"column['visible']\"\n          >\n            {{ column.displayName }}\n          </mat-checkbox>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n</div>\n", styles: [".groupBySection{padding:10px;border:1px solid #b0b0b0;border-radius:5px;margin:5px 0}.groupBySectionScroll{max-height:180px;overflow-y:scroll;overflow-x:hidden;padding:0}.columnListItem{background:#f0f2ff;border:1px solid #f2f2f2;padding:5px!important;width:94%!important;font-size:10pt;height:25px!important;margin:1px}.listItemContent{display:flex;flex-wrap:wrap;justify-content:space-between;align-content:center;width:100%}.groupby-name{position:relative;top:5px}.smallIcon{transform:scale(.75);cursor:pointer}.tableColumns{padding:10px;border:1px solid #b0b0b0;border-radius:5px;margin:5px 0}.tableColumnsScroll{height:180px;overflow-y:scroll;overflow-x:hidden;padding:0}.width-100{width:100%}.warning-group-message{margin:10px 0 0 5px;color:#757575;font-size:80%}\n"], components: [{ type: i3.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i5.MatAutocomplete, selector: "mat-autocomplete", inputs: ["disableRipple"], exportAs: ["matAutocomplete"] }, { type: i6.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i7.MatList, selector: "mat-list, mat-action-list", inputs: ["disableRipple", "disabled"], exportAs: ["matList"] }, { type: i7.MatListItem, selector: "mat-list-item, a[mat-list-item], button[mat-list-item]", inputs: ["disableRipple", "disabled"], exportAs: ["matListItem"] }, { type: i8.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "aria-describedby", "id", "required", "labelPosition", "name", "value", "checked", "disabled", "indeterminate"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }], directives: [{ type: i3.MatPrefix, selector: "[matPrefix]" }, { type: i9.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { type: i5.MatAutocompleteTrigger, selector: "input[matAutocomplete], textarea[matAutocomplete]", exportAs: ["matAutocompleteTrigger"] }, { type: i10.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i10.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i10.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i11.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableFilterPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cwp-table-filter-panel', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div>\n  <div class=\"groupBySection\">\n    <label id=\"tableFilterPanelByField\"><b>Group by Fields</b></label\n    ><br />\n    <mat-form-field appearance=\"outline\" class=\"width-100 outline-fields\">\n      <mat-icon id=\"tableFilterPanelSearchIcon\" matPrefix>search</mat-icon>\n      <input\n        type=\"text\"\n        #inputTrigger\n        placeholder=\"Add Group\"\n        matInput\n        [matAutocomplete]=\"autoCompleteGroups\"\n        [(ngModel)]=\"groupSearchKey\"\n        (ngModelChange)=\"addGroupUpdate.next(inputTrigger.value)\"\n      />\n      <mat-autocomplete\n        #autoCompleteGroups=\"matAutocomplete\"\n        [displayWith]=\"displayFn\"\n        (optionSelected)=\"addGroup($event.option.value)\"\n      >\n        <mat-option\n          *ngFor=\"let item of filteredGroupableColumns\"\n          [disabled]=\"this.configOptions.groupByColumns.length >= 3\"\n          [value]=\"item\"\n        >\n          <div (click)=\"addGroup(item)\">\n            <span id=\"tableFilterPanelName\">{{ item.displayName }}</span>\n          </div>\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n    <mat-list role=\"list\" class=\"groupBySectionScroll\">\n      <mat-list-item\n        role=\"listitem\"\n        *ngFor=\"let column of groupedColumns\"\n        class=\"columnListItem\"\n      >\n        <div class=\"listItemContent\">\n          <span id=\"tableFilterPanelColName\" class=\"groupby-name\">\n            {{ column.displayName }}\n          </span>\n          <mat-icon\n            id=\"tableFilterPanelCloseIcon\"\n            class=\"smallIcon\"\n            (click)=\"removeGroup($event, column)\"\n          >\n            close\n          </mat-icon>\n        </div>\n      </mat-list-item>\n    </mat-list>\n    <p id=\"tableFilterPanelRows\" class=\"warning-group-message\">\n      Can add only upto 3 Rows\n    </p>\n  </div>\n  <div class=\"tableColumns\">\n    <label id=\"tableFilterPanelCol\"><b>Columns</b></label>\n    <br />\n    <mat-form-field appearance=\"outline\" class=\"width-100 outline-fields\">\n      <mat-icon id=\"tableFilterPanelSearch\" matPrefix>search</mat-icon>\n      <input\n        type=\"text\"\n        placeholder=\"Select Columns\"\n        matInput\n        #inputColumn\n        [matAutocomplete]=\"autoCompleteColumns\"\n        [(ngModel)]=\"columnSearchKey\"\n        (ngModelChange)=\"addColumnUpdate.next(inputColumn.value)\"\n      />\n      <mat-autocomplete\n        #autoCompleteColumns=\"matAutocomplete\"\n        [displayWith]=\"displayFn\"\n        (optionSelected)=\"optionClicked($event.option.value)\"\n      >\n        <mat-option *ngFor=\"let item of filteredAllColumns\" [value]=\"item\">\n          <div (click)=\"optionClicked(item)\">\n            <mat-checkbox\n              [checked]=\"item.visible\"\n              (change)=\"toggleColumnVisibility($event.checked, item.id)\"\n            >\n              {{ item.displayName }}\n            </mat-checkbox>\n          </div>\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n    <br />\n    <mat-list role=\"list\" class=\"tableColumnsScroll\">\n      <mat-list-item\n        role=\"listitem\"\n        *ngFor=\"let column of configOptions.allColumns\"\n        class=\"columnListItem\"\n      >\n        <div class=\"listItemContent\">\n          <mat-checkbox\n            disableRipple\n            (change)=\"toggleColumnVisibility($event.checked, column['id'])\"\n            [checked]=\"column['visible']\"\n          >\n            {{ column.displayName }}\n          </mat-checkbox>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n</div>\n", styles: [".groupBySection{padding:10px;border:1px solid #b0b0b0;border-radius:5px;margin:5px 0}.groupBySectionScroll{max-height:180px;overflow-y:scroll;overflow-x:hidden;padding:0}.columnListItem{background:#f0f2ff;border:1px solid #f2f2f2;padding:5px!important;width:94%!important;font-size:10pt;height:25px!important;margin:1px}.listItemContent{display:flex;flex-wrap:wrap;justify-content:space-between;align-content:center;width:100%}.groupby-name{position:relative;top:5px}.smallIcon{transform:scale(.75);cursor:pointer}.tableColumns{padding:10px;border:1px solid #b0b0b0;border-radius:5px;margin:5px 0}.tableColumnsScroll{height:180px;overflow-y:scroll;overflow-x:hidden;padding:0}.width-100{width:100%}.warning-group-message{margin:10px 0 0 5px;color:#757575;font-size:80%}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatSnackBar }, { type: i0.ChangeDetectorRef }, { type: i2.DynamictableFilterService }]; }, propDecorators: { configOptions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,