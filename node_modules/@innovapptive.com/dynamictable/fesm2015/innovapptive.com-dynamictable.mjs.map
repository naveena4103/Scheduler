{"version":3,"file":"innovapptive.com-dynamictable.mjs","sources":["../../../projects/dynamictable/src/lib/constants.ts","../../../projects/dynamictable/src/lib/dynamictable.service.ts","../../../projects/dynamictable/src/lib/table-filter-panel/table-filter-panel.component.ts","../../../projects/dynamictable/src/lib/table-filter-panel/table-filter-panel.component.html","../../../projects/dynamictable/src/lib/time-ago-type-pipe/time-ago.pipe.ts","../../../projects/dynamictable/src/lib/dynamic-type-pipe/dynamic-type-pipe.ts","../../../projects/dynamictable/src/lib/dynamictable.component.ts","../../../projects/dynamictable/src/lib/dynamictable.component.html","../../../projects/dynamictable/src/lib/shared-material-module.ts","../../../projects/dynamictable/src/lib/avatar.component.ts","../../../projects/dynamictable/src/lib/dynamictable.module.ts","../../../projects/dynamictable/src/public-api.ts","../../../projects/dynamictable/src/innovapptive.com-dynamictable.ts"],"sourcesContent":["export const Constants = {\n    ADD_GROUP:'ADD_GROUP',\n    REMOVE_GROUP:'REMOVE_GROUP',\n    ADD_COLUMN:'ADD_COLUMN',\n    REMOVE_COLUMN:'REMOVE_COLUMN',\n    REFRESH_CONFIG:'REFRESH_CONFIG',\n    // TOGGLE_COLUMN:'TOGGLE_COLUMN',\n    REFRESH_FILTER_PANEL:'REFRESH_FILTER_PANEL',\n    WRITE_TO_UNDO_REDO:'WRITE_TO_UNDO_REDO',\n    EXECUTE_UNDO:'EXECUTE_UNDO',\n    EXECUTE_REDO:'EXECUTE_REDO'\n}","import { EventEmitter, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DynamictableFilterService {\n\n  tableLeftPanelEventEmitter: EventEmitter<any> = new EventEmitter();\n\n  emitEvent(data:any){\n    this.tableLeftPanelEventEmitter.emit(data);\n  }\n  \n  getEventEmitter(){\n    return this.tableLeftPanelEventEmitter;\n  }\n\n  constructor() { }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DynamictableScrollerService {\n\n  scrollEventEmitter: EventEmitter<any> = new EventEmitter();\n\n  emitEvent(data:any){\n    this.scrollEventEmitter.emit(data);\n  }\n  \n  getEventEmitter(){\n    return this.scrollEventEmitter;\n  }\n\n  constructor() { }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n  SimpleChanges\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Column, ConfigOptions } from '../interfaces';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\nimport { Constants } from '../constants';\nimport { DynamictableFilterService } from '../dynamictable.service';\nimport {\n  MatSnackBar,\n  MatSnackBarHorizontalPosition,\n  MatSnackBarVerticalPosition\n} from '@angular/material/snack-bar';\n@Component({\n  selector: 'cwp-table-filter-panel',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './table-filter-panel.component.html',\n  styleUrls: ['./table-filter-panel.component.css']\n})\nexport class TableFilterPanelComponent implements OnInit {\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'top';\n\n  @Input() configOptions: ConfigOptions;\n\n  addGroupUpdate = new Subject<string>();\n  groupSearchKey: string;\n  filteredGroupableColumns: any[];\n\n  addColumnUpdate = new Subject<string>();\n  columnSearchKey: string;\n  filteredAllColumns: Column[];\n\n  groupedColumns: any[] = new Array<any>();\n  groupableColumns: any[];\n\n  displayedColumns: Column[];\n  visibleColumns: any[] = new Array<any>();\n  subscription: any;\n\n  constructor(\n    private _snackBar: MatSnackBar,\n    private changeDetectorRefs: ChangeDetectorRef,\n    private dynamictableFilterService: DynamictableFilterService\n  ) {\n    // Debounce search for add rowGroup.\n    this.addGroupUpdate\n      .pipe(debounceTime(50), distinctUntilChanged())\n      .subscribe((value: string) => {\n        if (value === '') {\n          let _filtered = this.configOptions.allColumns.filter(\n            (x: any) => x.groupable && x.visible\n          );\n          this.filteredGroupableColumns = _filtered;\n          this.changeDetectorRefs.detectChanges();\n        } else {\n          let _filtered = this.configOptions.allColumns.filter(\n            (column: any) => {\n              let index = this.groupedColumns.findIndex(\n                (x) => x.id === column.id\n              );\n              return (\n                index < 0 &&\n                column.visible &&\n                column.groupable &&\n                column.displayName\n                  ?.toLowerCase()\n                  ?.indexOf(value?.toLocaleLowerCase()) > -1\n              );\n            }\n          );\n          this.filteredGroupableColumns = _filtered;\n          this.changeDetectorRefs.detectChanges();\n        }\n      });\n\n    // Debounce search for add columns.\n    this.addColumnUpdate\n      .pipe(debounceTime(50), distinctUntilChanged())\n      .subscribe((value: string) => {\n        if (value === '') {\n          this.filteredAllColumns = this.configOptions.allColumns;\n          this.changeDetectorRefs.detectChanges();\n        } else {\n          let _filtered = this.configOptions.allColumns.filter(\n            (column) =>\n              column.displayName\n                .toLocaleLowerCase()\n                .indexOf(value?.toLocaleLowerCase()) > -1\n          );\n          this.filteredAllColumns = _filtered;\n          this.changeDetectorRefs.detectChanges();\n        }\n      });\n  }\n\n  refreshFilterPanel() {\n    this.configOptions = { ...this.configOptions };\n    this.groupableColumns = this.configOptions.allColumns.filter(\n      (column) => column['visible'] && column['groupable']\n    );\n    this.visibleColumns = this.configOptions.allColumns.filter(\n      (column) => column['visible']\n    );\n\n    this.groupedColumns = [];\n    this.configOptions.groupByColumns.forEach((column: string) => {\n      let index = this.groupableColumns.findIndex((x) => x.id === column);\n      if (index > -1) {\n        this.groupedColumns.push(this.groupableColumns[index]);\n        this.groupableColumns.splice(index, 1);\n      }\n    });\n    this.filteredGroupableColumns = this.groupableColumns;\n    // let _filtered = this.configOptions.allColumns;//.filter(column => !column.visible);\n    this.filteredAllColumns = this.configOptions.allColumns;\n    this.displayedColumns = this.configOptions.allColumns.filter(\n      (column) => column['visible']\n    );\n    this.changeDetectorRefs.detectChanges();\n  }\n\n  displayFn(reportColumn: any): string {\n    return '';\n  }\n\n  ngOnInit() {\n    this.refreshFilterPanel();\n    this.subscription = this.dynamictableFilterService\n      .getEventEmitter()\n      .subscribe((eventData) => {\n        this.handleEvent(eventData);\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (\n      changes &&\n      changes['configOptions'] &&\n      !changes['configOptions'].firstChange\n    ) {\n      this.refreshFilterPanel();\n    }\n  }\n\n  handleEvent(event: any) {\n    if (event.eventType === Constants.REFRESH_FILTER_PANEL) {\n      this.refreshFilterPanel();\n    }\n  }\n\n  addGroup(column: any) {\n    this.dynamictableFilterService.emitEvent({\n      eventType: Constants.ADD_GROUP,\n      data: column\n    });\n\n    this.groupSearchKey = '';\n  }\n\n  removeGroup(event: any, column: any) {\n    event.stopPropagation();\n    this.dynamictableFilterService.emitEvent({\n      eventType: Constants.REMOVE_GROUP,\n      data: column\n    });\n  }\n\n  openSnackBar(message: string) {\n    this._snackBar.open(message, '', {\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n      duration: 5000 // 5 milliseconds\n    });\n  }\n\n  optionClicked(item: any) {\n    item.visible = !item.visible;\n    this.toggleColumnVisibility(item.visible, item.id);\n  }\n\n  toggleColumnVisibility(isChecked: boolean, columnId: string) {\n    this.visibleColumns = this.configOptions.allColumns.filter(\n      (column) => column['visible']\n    );\n    if (!isChecked && this.visibleColumns.length == 1) {\n      this.filteredAllColumns.forEach((col) => {\n        if (col.id === columnId) {\n          col.visible = true;\n        }\n      });\n      this.displayedColumns.forEach((col) => {\n        if (col.id === columnId) {\n          col.visible = true;\n        }\n      });\n      this.openSnackBar(\n        'Please make sure to have aleast one column in the report!'\n      );\n      return;\n    }\n\n    this.dynamictableFilterService.emitEvent({\n      eventType: isChecked ? Constants.ADD_COLUMN : Constants.REMOVE_COLUMN,\n      data: { isChecked: isChecked, columnId: columnId }\n    });\n\n    this.columnSearchKey = '';\n  }\n}\n","<div>\n  <div class=\"groupBySection\">\n    <label id=\"tableFilterPanelByField\"><b>Group by Fields</b></label\n    ><br />\n    <mat-form-field appearance=\"outline\" class=\"width-100 outline-fields\">\n      <mat-icon id=\"tableFilterPanelSearchIcon\" matPrefix>search</mat-icon>\n      <input\n        type=\"text\"\n        #inputTrigger\n        placeholder=\"Add Group\"\n        matInput\n        [matAutocomplete]=\"autoCompleteGroups\"\n        [(ngModel)]=\"groupSearchKey\"\n        (ngModelChange)=\"addGroupUpdate.next(inputTrigger.value)\"\n      />\n      <mat-autocomplete\n        #autoCompleteGroups=\"matAutocomplete\"\n        [displayWith]=\"displayFn\"\n        (optionSelected)=\"addGroup($event.option.value)\"\n      >\n        <mat-option\n          *ngFor=\"let item of filteredGroupableColumns\"\n          [disabled]=\"this.configOptions.groupByColumns.length >= 3\"\n          [value]=\"item\"\n        >\n          <div (click)=\"addGroup(item)\">\n            <span id=\"tableFilterPanelName\">{{ item.displayName }}</span>\n          </div>\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n    <mat-list role=\"list\" class=\"groupBySectionScroll\">\n      <mat-list-item\n        role=\"listitem\"\n        *ngFor=\"let column of groupedColumns\"\n        class=\"columnListItem\"\n      >\n        <div class=\"listItemContent\">\n          <span id=\"tableFilterPanelColName\" class=\"groupby-name\">\n            {{ column.displayName }}\n          </span>\n          <mat-icon\n            id=\"tableFilterPanelCloseIcon\"\n            class=\"smallIcon\"\n            (click)=\"removeGroup($event, column)\"\n          >\n            close\n          </mat-icon>\n        </div>\n      </mat-list-item>\n    </mat-list>\n    <p id=\"tableFilterPanelRows\" class=\"warning-group-message\">\n      Can add only upto 3 Rows\n    </p>\n  </div>\n  <div class=\"tableColumns\">\n    <label id=\"tableFilterPanelCol\"><b>Columns</b></label>\n    <br />\n    <mat-form-field appearance=\"outline\" class=\"width-100 outline-fields\">\n      <mat-icon id=\"tableFilterPanelSearch\" matPrefix>search</mat-icon>\n      <input\n        type=\"text\"\n        placeholder=\"Select Columns\"\n        matInput\n        #inputColumn\n        [matAutocomplete]=\"autoCompleteColumns\"\n        [(ngModel)]=\"columnSearchKey\"\n        (ngModelChange)=\"addColumnUpdate.next(inputColumn.value)\"\n      />\n      <mat-autocomplete\n        #autoCompleteColumns=\"matAutocomplete\"\n        [displayWith]=\"displayFn\"\n        (optionSelected)=\"optionClicked($event.option.value)\"\n      >\n        <mat-option *ngFor=\"let item of filteredAllColumns\" [value]=\"item\">\n          <div (click)=\"optionClicked(item)\">\n            <mat-checkbox\n              [checked]=\"item.visible\"\n              (change)=\"toggleColumnVisibility($event.checked, item.id)\"\n            >\n              {{ item.displayName }}\n            </mat-checkbox>\n          </div>\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n    <br />\n    <mat-list role=\"list\" class=\"tableColumnsScroll\">\n      <mat-list-item\n        role=\"listitem\"\n        *ngFor=\"let column of configOptions.allColumns\"\n        class=\"columnListItem\"\n      >\n        <div class=\"listItemContent\">\n          <mat-checkbox\n            disableRipple\n            (change)=\"toggleColumnVisibility($event.checked, column['id'])\"\n            [checked]=\"column['visible']\"\n          >\n            {{ column.displayName }}\n          </mat-checkbox>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n</div>\n","import {\n  Pipe,\n  PipeTransform,\n  NgZone,\n  ChangeDetectorRef,\n  OnDestroy\n} from '@angular/core';\n\n@Pipe({\n  name: 'timeAgo',\n  pure: false\n})\nexport class TimeAgoPipe implements PipeTransform, OnDestroy {\n  private timer: number | null;\n  constructor(\n    private ngZone: NgZone,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnDestroy(): void {\n    this.removeTimer();\n  }\n\n  transform(value: any): unknown {\n    this.removeTimer();\n    const value1 = value?.replace('T', ' ').replace('.000Z', '');\n    const d = new Date(value1);\n    const now = new Date();\n    const seconds = Math.round(Math.abs((now.getTime() - d.getTime()) / 1000));\n    const timeToUpdate = Number.isNaN(seconds)\n      ? 1000\n      : this.getSecondsUntilUpdate(seconds) * 1000;\n    this.timer = this.ngZone.runOutsideAngular(() => {\n      if (typeof window !== 'undefined') {\n        return window.setTimeout(() => {\n          this.ngZone.run(() => this.changeDetectorRef.markForCheck());\n        }, timeToUpdate);\n      }\n      return null;\n    });\n    const minutes = Math.round(Math.abs(seconds / 60));\n    const hours = Math.round(Math.abs(minutes / 60));\n    const days = Math.round(Math.abs(hours / 24));\n    const months = Math.round(Math.abs(days / 30.416));\n    const years = Math.round(Math.abs(days / 365));\n    if (Number.isNaN(seconds)) {\n      return '';\n    } else if (seconds <= 45) {\n      return 'Just now';\n    } else if (minutes <= 3) {\n      return 'Just now';\n    } else if (minutes <= 45) {\n      return minutes + ' minutes ago';\n    } else if (minutes <= 90) {\n      return 'An hour ago';\n    } else if (hours <= 22) {\n      return 'Today';\n    } else if (hours <= 36) {\n      return 'Yesterday';\n    } else if (days <= 25) {\n      return days + ' days ago';\n    } else if (days <= 45) {\n      return 'A month ago';\n    } else if (days <= 345) {\n      return months + ' months ago';\n    } else if (days <= 545) {\n      return 'A year ago';\n    } else {\n      // (days > 545)\n      return years + ' years ago';\n    }\n  }\n\n  private removeTimer() {\n    if (this.timer) {\n      window.clearTimeout(this.timer);\n      this.timer = null;\n    }\n  }\n  private getSecondsUntilUpdate(seconds: number) {\n    const min = 60;\n    const hr = min * 60;\n    const day = hr * 24;\n    if (seconds < min) {\n      // less than 1 min, update every 2 secs\n      return 2;\n    } else if (seconds < hr) {\n      // less than an hour, update every 30 secs\n      return 30;\n    } else if (seconds < day) {\n      // less then a day, update every 5 mins\n      return 300;\n    } else {\n      // update every hour\n      return 3600;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { TimeAgoPipe } from '../time-ago-type-pipe/time-ago.pipe';\n\n@Pipe({\n  name: 'dynamicTypePipe'\n})\nexport class DynamicTypePipe implements PipeTransform {\n  constructor(private timeAgoPipe: TimeAgoPipe) {}\n\n  transform(val: any, pipeType: string) {\n    switch (pipeType) {\n      case 'date':\n        val = new DatePipe('en-US').transform(val, 'short');\n        break;\n      case 'timeAgo':\n        val = this.timeAgoPipe.transform(val);\n        break;\n      default:\n      // do nothing\n    }\n    return val;\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  SimpleChanges,\n  OnDestroy\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort, MatSortable } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Column, ConfigOptions } from './interfaces';\nimport { Constants } from './constants';\nimport {\n  DynamictableFilterService,\n  DynamictableScrollerService\n} from './dynamictable.service';\nimport {\n  MatSnackBar,\n  MatSnackBarHorizontalPosition,\n  MatSnackBarVerticalPosition\n} from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'cwp-dynamictable',\n  templateUrl: './dynamictable.component.html',\n  styleUrls: ['./dynamictable.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition(\n        'expanded <=> collapsed',\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')\n      )\n    ])\n  ]\n})\nexport class DynamictableComponent implements OnInit, OnDestroy {\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'top';\n\n  spans: any[] = [];\n  selectedRows: any[] = [];\n\n  displayedColumns: Column[];\n  expandedElement: any | null;\n  columnsToDisplay: string[];\n  opened: boolean = false;\n\n  lastScrollLeft: number = 0;\n\n  stickyColumns: string[] = [];\n  stickyEndColumns: string[] = [];\n  selectedRowIndex = -1;\n  reverseSortColumns: any = {};\n  selection: any;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  @Input() set configOptions(configOptions: ConfigOptions) {\n    this._configOptions = configOptions\n      ? { ...configOptions }\n      : ({} as ConfigOptions);\n  }\n  get configOptions(): ConfigOptions {\n    return this._configOptions;\n  }\n\n  @Input() set dataSource(dataSource: MatTableDataSource<any>) {\n    this._dataSource = dataSource\n      ? dataSource\n      : ({} as MatTableDataSource<any>);\n    this.dataSource.paginator = this.paginator;\n\n    this.selectedRows = this.dataSource?.data.filter(\n      (data) => data?.isSelected\n    );\n  }\n\n  get dataSource(): MatTableDataSource<any> {\n    return this._dataSource;\n  }\n\n  private _configOptions: ConfigOptions;\n  private _dataSource: MatTableDataSource<any>;\n\n  @Output() fetchDataCallback: EventEmitter<any> = new EventEmitter();\n  @Output() rowLevelActionHandler: EventEmitter<any> = new EventEmitter();\n  @Output() cellClickActionHandler: EventEmitter<any> = new EventEmitter();\n  @Output() onConfigOptionsChange: EventEmitter<any> = new EventEmitter();\n  @Output() onToggleChangeHandler: EventEmitter<any> = new EventEmitter();\n  @Output() onSelectButtonToggle: EventEmitter<any> = new EventEmitter();\n\n  visibleColumns: any[] = new Array<any>();\n  subscription: any;\n  scrollSubscription: any;\n  scrollTop: any;\n\n  constructor(\n    private _snackBar: MatSnackBar,\n    private changeDetectorRefs: ChangeDetectorRef,\n    private dynamictableFilterService: DynamictableFilterService,\n    private domSanitizer: DomSanitizer,\n    private dynamictableScrollerService: DynamictableScrollerService\n  ) {}\n\n  resetConfigOptions() {\n    this.configOptions = { ...this.configOptions };\n    this.setColumnsToDisplay();\n    this.visibleColumns = this.configOptions.allColumns.filter(\n      (column) => column['visible']\n    );\n\n    this.configOptions.groupByColumns.forEach((column: string) => {\n      this.reOrderColumns(column, 'index');\n      this.setColumnsToDisplay();\n      this.stick(column);\n      this.displayedColumns.forEach((column: any) => {\n        if (column.id == column) {\n          column.sticky = true;\n        }\n      });\n    });\n  }\n\n  highlight(row: any) {\n    this.selectedRowIndex = row.id;\n  }\n\n  ngOnInit() {\n    this.selection = new SelectionModel<any>(true, this.selectedRows);\n    this.resetConfigOptions();\n    this.subscription = this.dynamictableFilterService\n      .getEventEmitter()\n      .subscribe((eventData) => this.handleEvent(eventData));\n    this.scrollSubscription = this.dynamictableScrollerService\n      .getEventEmitter()\n      .subscribe(() => {\n        this.scrollToTop();\n      });\n\n    this.dataSource.sortingDataAccessor = (data, sortHeaderId) => {\n      const configInfo: any = this.configOptions.allColumns.filter(\n        (item) => item.id === sortHeaderId\n      );\n      if (data[sortHeaderId] === null || data[sortHeaderId] === undefined)\n        if (configInfo.type === 'string') {\n          return '';\n        } else if (configInfo.type === 'number') {\n          return 0;\n        }\n      if (configInfo.type === 'string') {\n        return data[sortHeaderId].toLowerCase();\n      } else {\n        return data[sortHeaderId];\n      }\n    };\n    this.configOptions.allColumns.map((col) => {\n      if (col.reverseSort) {\n        this.reverseSortColumns[col.id] = 1;\n      }\n    });\n    this.dataSource.sortData = this.sortData();\n  }\n\n  sortData() {\n    let sortFunction = (items: any, sort: MatSort): any => {\n      if (!sort.active || sort.direction === '') {\n        return items;\n      }\n      return items.sort((a: any, b: any) => {\n        let comparatorResult = 0;\n        const dateTimeRegex =\n          /^(\\w{3}\\s\\d{1,2},\\s\\d{2,4})\\s(\\d{1,2}:\\d{2}\\s[APap][Mm])$/;\n\n        const dateRangeRegex =\n          /^(\\w{3} \\d{1,2}, \\d{2,4}) - (\\w{3} \\d{1,2}, \\d{2,4})$/;\n\n        const column = sort.active;\n\n        if (\n          a[column] === null ||\n          a[column] === undefined ||\n          a[column] === '_ _' ||\n          a[column].length === 0\n        )\n          return 1;\n        if (\n          b[column] === null ||\n          b[column] === undefined ||\n          b[column] === '_ _' ||\n          b[column].length === 0\n        )\n          return -1;\n\n        if (typeof a[column] === 'number' && typeof b[column] === 'number') {\n          if (this.reverseSortColumns[column]) {\n            comparatorResult = b[column] - a[column];\n          } else {\n            comparatorResult = a[column] - b[column];\n          }\n          return comparatorResult * (sort.direction == 'asc' ? 1 : -1);\n        } else if (typeof a[column] === 'number') {\n          return -1;\n        } else if (typeof b[column] === 'number') {\n          return 1;\n        } else if (\n          dateRangeRegex.test(a[column]) &&\n          dateRangeRegex.test(b[column])\n        ) {\n          const date1 = new Date(a[column].split('-')[0].trim()).getTime();\n          const date2 = new Date(b[column].split('-')[0].trim()).getTime();\n          if (this.reverseSortColumns[column]) {\n            comparatorResult = date2 - date1;\n          } else {\n            comparatorResult = date1 - date2;\n          }\n          return comparatorResult * (sort.direction == 'asc' ? 1 : -1);\n        } else if (\n          dateTimeRegex.test(a[column]) &&\n          dateTimeRegex.test(b[column])\n        ) {\n          const date1 = new Date(a[column]).getTime();\n          const date2 = new Date(b[column]).getTime();\n          if (this.reverseSortColumns[column]) {\n            comparatorResult = date2 - date1;\n          } else {\n            comparatorResult = date1 - date2;\n          }\n          return comparatorResult * (sort.direction == 'asc' ? 1 : -1);\n        } else if (Array.isArray(a[column]) && Array.isArray(b[column])) {\n          if (this.reverseSortColumns[column]) {\n            comparatorResult = b[column][0].localeCompare(a[column][0]);\n          } else {\n            comparatorResult = a[column][0].localeCompare(b[column][0]);\n          }\n          return comparatorResult * (sort.direction == 'asc' ? 1 : -1);\n        } else {\n          if (this.reverseSortColumns[column]) {\n            comparatorResult = b[column].localeCompare(a[column]);\n          } else {\n            comparatorResult = a[column].localeCompare(b[column]);\n          }\n          return comparatorResult * (sort.direction == 'asc' ? 1 : -1);\n        }\n      });\n    };\n    return sortFunction;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (\n      changes &&\n      changes['dataSource'] &&\n      !changes['dataSource'].firstChange\n    ) {\n      if (\n        changes['dataSource']['currentValue'].data <\n        changes['dataSource']['previousValue'].data\n      ) {\n        this.resetTableScroll();\n      }\n\n      // mergeRows for newly concatenated rows\n      const groupedCols: any[] = [];\n      this.configOptions.allColumns.forEach((col: any) => {\n        if (col.reverseSort) this.reverseSortColumns[col.id] = 1;\n        const groupByCols: string[] = this.configOptions.groupByColumns;\n        const index = groupByCols.indexOf(col.id);\n        if (index > -1) {\n          groupedCols.push(col);\n        }\n      });\n      if (groupedCols.length) {\n        groupedCols.forEach((col) => {\n          if (col.isMultiValued) {\n            this.dataSource.data = this.expandRowsForMultiValuedCols(col.id);\n          }\n        });\n      }\n      this.dataSource.sortingDataAccessor = (data, sortHeaderId) => {\n        const configInfo: any = this.configOptions.allColumns.filter(\n          (item) => item.id === sortHeaderId\n        );\n        if (data[sortHeaderId] === null || data[sortHeaderId] === undefined) {\n          if (configInfo.type === 'string') {\n            return '';\n          } else if (configInfo.type === 'number') {\n            return 0;\n          }\n        }\n        if (configInfo.type === 'string') {\n          return data[sortHeaderId].toLowerCase();\n        } else {\n          return data[sortHeaderId];\n        }\n      };\n      this.dataSource.sortData = this.sortData();\n      this.dataSource.sort = this.sort;\n      this.resetSelection();\n      this.repaintTable();\n    }\n    if (\n      changes &&\n      changes['configOptions'] &&\n      !changes['configOptions'].firstChange\n    ) {\n      this.resetConfigOptions();\n    }\n    if (\n      changes &&\n      changes['configOptions'] &&\n      changes['configOptions'].firstChange\n    ) {\n      this.configOptions.allColumns.forEach((col) => {\n        col.originalOrder = col.order;\n      });\n    }\n  }\n\n  handleEvent(event: any) {\n    switch (event.eventType) {\n      case Constants.EXECUTE_UNDO:\n        this.triggerUndoExecution(event);\n        break;\n      case Constants.EXECUTE_REDO:\n        this.triggerRedoExecution(event);\n        break;\n      case Constants.ADD_GROUP:\n        this.addGroup(event.data);\n        break;\n      case Constants.REMOVE_GROUP:\n        this.removeGroup(event.data);\n        break;\n      case Constants.ADD_COLUMN:\n        this.toggleColumnVisibility(event.data.isChecked, event.data.columnId);\n        break;\n      case Constants.REMOVE_COLUMN:\n        this.toggleColumnVisibility(event.data.isChecked, event.data.columnId);\n        break;\n    }\n  }\n\n  triggerUndoExecution(event: any) {\n    switch (event.eventName) {\n      case Constants.ADD_GROUP:\n        this.removeGroup(event.data, undefined, true);\n        break;\n      case Constants.REMOVE_GROUP:\n        this.addGroup(event.data, undefined, true);\n        break;\n      case Constants.ADD_COLUMN:\n        this.toggleColumnVisibility(false, event.data, true);\n        break;\n      case Constants.REMOVE_COLUMN:\n        this.toggleColumnVisibility(true, event.data, true);\n        break;\n    }\n  }\n\n  triggerRedoExecution(event: any) {\n    switch (event.eventName) {\n      case Constants.ADD_GROUP:\n        this.addGroup(event.data, undefined, true);\n        break;\n      case Constants.REMOVE_GROUP:\n        this.removeGroup(event.data, undefined, true);\n        break;\n      case Constants.ADD_COLUMN:\n        this.toggleColumnVisibility(true, event.data, true);\n        break;\n      case Constants.REMOVE_COLUMN:\n        this.toggleColumnVisibility(false, event.data, true);\n        break;\n    }\n  }\n\n  isGrouped(columnId: string) {\n    let isGrouped = false;\n    let groupByCols: string[] = this.configOptions.groupByColumns;\n    if (groupByCols.indexOf(columnId) > -1) {\n      isGrouped = true;\n    }\n    return isGrouped;\n  }\n\n  isArray(object: any) {\n    return Array.isArray(object);\n  }\n\n  expandRowsForMultiValuedCols(colId: string) {\n    const dataSourceTemp = [...this.dataSource.data];\n    const expandedRows: any[] = [];\n    dataSourceTemp.forEach((row) => {\n      const multiValues = row[colId];\n      if (Array.isArray(multiValues)) {\n        multiValues.forEach((val) => {\n          const expandRowTemp = { ...row };\n          expandRowTemp[colId] = val;\n          expandedRows.push(expandRowTemp);\n        });\n      } else {\n        expandedRows.push(row);\n      }\n    });\n    return expandedRows;\n  }\n\n  mergeRowsForMultiValuedCols(colId: string) {\n    const dataSourceTemp = [...this.dataSource.data];\n    const mergedRows: any[] = [];\n    dataSourceTemp.forEach((row) => {\n      const index = mergedRows.findIndex((r) => r.id === row.id);\n      if (index > -1) {\n        const existingRow = mergedRows[index];\n        let multiValuedCol = existingRow[colId];\n        if (Array.isArray(multiValuedCol)) {\n          multiValuedCol.push(row[colId]);\n        } else {\n          let tempVal = multiValuedCol;\n          multiValuedCol = [tempVal];\n          multiValuedCol.push(row[colId]);\n        }\n        existingRow[colId] = multiValuedCol;\n        mergedRows[index] = existingRow;\n      } else {\n        mergedRows.push(row);\n      }\n    });\n    return mergedRows;\n  }\n\n  addGroup(item: any, event?: Event, externalTrigger?: boolean | false) {\n    if (event) {\n      event.stopPropagation();\n    }\n\n    if (item.isMultiValued) {\n      this.dataSource.data = this.expandRowsForMultiValuedCols(item.id);\n    }\n\n    let groupedColIds: string[] = this.configOptions.groupByColumns;\n    let groupIndex = groupedColIds.indexOf(item.id);\n    if (this.configOptions.groupByColumns.length >= 3 || groupIndex > -1) {\n      return;\n    }\n    let _groupedColumnIDs = [...this.configOptions.groupByColumns];\n    _groupedColumnIDs.push(item.id);\n    this.configOptions.groupByColumns = [..._groupedColumnIDs];\n    this.reOrderColumns(item.id, 'index');\n    this.setColumnsToDisplay();\n    this.stick(item.id);\n    this.displayedColumns.forEach((column: any) => {\n      if (column.id === item.id) {\n        column.sticky = true;\n      }\n    });\n    this.configOptions = { ...this.configOptions };\n    this.onConfigOptionsChange.emit({\n      eventType: Constants.REFRESH_CONFIG,\n      data: this.configOptions\n    });\n    if (!externalTrigger) {\n      this.onConfigOptionsChange.emit({\n        eventType: Constants.WRITE_TO_UNDO_REDO,\n        eventName: Constants.ADD_GROUP,\n        data: item\n      });\n    }\n  }\n\n  removeGroup(item: any, event?: Event, externalTrigger?: boolean | false) {\n    if (event) {\n      event.stopPropagation();\n    }\n\n    if (item.isMultiValued) {\n      this.dataSource.data = this.mergeRowsForMultiValuedCols(item.id);\n    }\n\n    let _groupedColumnIDs = [...this.configOptions.groupByColumns];\n    let index = _groupedColumnIDs.findIndex((x) => x === item.id);\n    if (index > -1) {\n      _groupedColumnIDs.splice(index, 1);\n    }\n    this.configOptions.groupByColumns = [..._groupedColumnIDs];\n    this.reOrderColumns(item.id, 'original');\n    this.setColumnsToDisplay();\n    this.unstick(item.id);\n    this.displayedColumns.forEach((column: any) => {\n      if (column.id == item.id) {\n        column.sticky = false;\n      }\n    });\n\n    this.configOptions = { ...this.configOptions };\n    this.onConfigOptionsChange.emit({\n      eventType: Constants.REFRESH_CONFIG,\n      data: this.configOptions\n    });\n    if (!externalTrigger) {\n      this.onConfigOptionsChange.emit({\n        eventType: Constants.WRITE_TO_UNDO_REDO,\n        eventName: Constants.REMOVE_GROUP,\n        data: item\n      });\n    }\n  }\n\n  optionClicked(event: Event, item: any) {\n    event.stopPropagation();\n    item.selected = !item.selected;\n    if (item.selected) {\n      this.toggleColumnVisibility(true, item.id);\n    } else {\n      this.toggleColumnVisibility(false, item.id);\n    }\n  }\n\n  onTableScroll(event: any) {\n    let element = event.target;\n    let isBottomReached =\n      Math.abs(element.scrollHeight) -\n        Math.abs(element.scrollTop) -\n        Math.abs(element.clientHeight) <=\n      1;\n\n    let documentScrollLeft = element.scrollLeft;\n    if (this.lastScrollLeft !== documentScrollLeft) {\n      this.lastScrollLeft = documentScrollLeft;\n      return;\n    }\n\n    if (isBottomReached) {\n      this.fetchDataCallback.emit({ data: 'infiniteScroll' });\n    }\n\n    this.scrollTop = element.scrollTop;\n  }\n\n  onRowLevelActionClick(action: any, event: any, subMenu = 'subMenu') {\n    this.rowLevelActionHandler.emit({\n      action: action.action,\n      data: event,\n      subMenu: subMenu\n    });\n  }\n\n  onRowLevelActionIconClick(action: any, event: any) {\n    this.dataSource.data = this.dataSource.data.map((row: any) =>\n      row.id === event.id\n        ? { ...row, [action.property]: !row[action.property] }\n        : row\n    );\n    this.rowLevelActionHandler.emit({\n      action: action.action,\n      data: event\n    });\n  }\n\n  customWhen = (index: any) => {\n    return this.configOptions.rowsExpandable;\n  };\n\n  setColumnsToDisplay() {\n    this.configOptions.allColumns.sort((a, b) => {\n      return a.order - b.order;\n    });\n    let _displayedColumns: Column[] = this.configOptions.allColumns.filter(\n      (column) => column['visible']\n    );\n    this.displayedColumns = _displayedColumns;\n    let _displayedColStrs: string[] = _displayedColumns.map((col) => col['id']);\n    if (this.configOptions.enableRowsSelection) {\n      this.columnsToDisplay = ['selected', ..._displayedColStrs.slice()];\n    } else {\n      this.columnsToDisplay = [..._displayedColStrs.slice()];\n    }\n    if (this.configOptions.displayActionsColumn) {\n      this.columnsToDisplay = [...this.columnsToDisplay, 'actions'];\n    }\n    this.configOptions = { ...this.configOptions };\n  }\n\n  groupAndSort(data: any[]) {\n    let _data: any[] = [];\n    let groupByCols = this.configOptions.groupByColumns;\n\n    if (groupByCols.length > 0) {\n      let groupsL0 = this.groupBy(data, groupByCols[0]);\n\n      groupsL0 = Object.values(groupsL0);\n\n      if (groupByCols.length > 1) {\n        groupsL0.forEach((rowL0: any) => {\n          let _groupL1 = this.groupBy(rowL0, groupByCols[1]);\n          _groupL1 = Object.values(_groupL1);\n\n          if (groupByCols.length > 2) {\n            _groupL1.forEach((rowL1: any) => {\n              let _groupL2 = this.groupBy(rowL1, groupByCols[2]);\n              _groupL2 = Object.values(_groupL2);\n              let arr: any[] = [];\n              _groupL2.forEach((element: any) => {\n                arr = arr.concat(element);\n              });\n              _data = _data.concat(...arr);\n            });\n          } else {\n            let arr: any[] = [];\n            _groupL1.forEach((element: any) => {\n              arr = arr.concat(element);\n            });\n            _data = _data.concat(...arr);\n          }\n        });\n      } else {\n        let arr: any[] = [];\n        groupsL0.forEach((element: any) => {\n          arr = arr.concat(element);\n        });\n        _data = _data.concat(...arr);\n      }\n\n      this.dataSource.data = _data;\n    }\n  }\n\n  groupBy(arr: any[], key: string) {\n    let result = arr.reduce(function (r, a) {\n      r[a[key]] = r[a[key]] || [];\n      r[a[key]].push(a);\n      return r;\n    }, Object.create(null));\n    return result;\n  }\n\n  cacheSpan(key: string, groupLevel?: number) {\n    const DATA = [...this.dataSource.data];\n    for (let i = 0; i < DATA.length; ) {\n      let currentValue = DATA[i][key];\n      let group0Key;\n      let group1Key;\n      let group2Key;\n      let group0Val;\n      let group1Val;\n      let group2Val;\n      if (groupLevel == 2) {\n        group0Key = this.configOptions.groupByColumns[0];\n        group1Key = this.configOptions.groupByColumns[1];\n        group2Key = this.configOptions.groupByColumns[2];\n        group0Val = DATA[i][this.configOptions.groupByColumns[0]];\n        group1Val = DATA[i][this.configOptions.groupByColumns[1]];\n        group2Val = DATA[i][this.configOptions.groupByColumns[2]];\n      } else if (groupLevel == 1) {\n        group0Key = this.configOptions.groupByColumns[0];\n        group1Key = this.configOptions.groupByColumns[1];\n        group0Val = DATA[i][this.configOptions.groupByColumns[0]];\n        group1Val = DATA[i][this.configOptions.groupByColumns[1]];\n      } else if (groupLevel == 0) {\n        group0Key = this.configOptions.groupByColumns[0];\n        group1Key = this.configOptions.groupByColumns[1];\n        group0Val = DATA[i][this.configOptions.groupByColumns[0]];\n      }\n\n      let count = 1;\n      for (let j = i + 1; j < DATA.length; j++) {\n        let isSameGroup = true;\n\n        if (groupLevel == 2) {\n          if (\n            (group0Key && group0Val !== DATA[j][group0Key]) ||\n            (group1Key && group1Val !== DATA[j][group1Key])\n          ) {\n            isSameGroup = false;\n          }\n        } else if (groupLevel == 1) {\n          if (group0Key && group0Val !== DATA[j][group0Key]) {\n            isSameGroup = false;\n          }\n        }\n\n        if (!isSameGroup) {\n          break;\n        }\n\n        if (currentValue !== DATA[j][key]) {\n          break;\n        }\n        count++;\n      }\n      if (!this.spans[i]) {\n        this.spans[i] = {};\n      }\n      this.spans[i][key] = count;\n      i += count;\n    }\n  }\n\n  getRowSpan(col: string, index: number) {\n    let groupByCols: string[] = this.configOptions.groupByColumns;\n    if (groupByCols.indexOf(col) > -1) {\n      return this.spans[index] && this.spans[index][col];\n    }\n    return 1;\n  }\n  getRowSpanDisplay(col: string, index: number) {\n    let displayStr = '';\n    let groupByCols: string[] = this.configOptions.groupByColumns;\n    if (groupByCols.indexOf(col) > -1) {\n      displayStr = this.spans[index] && this.spans[index][col] ? 'none' : '';\n    }\n    return displayStr;\n  }\n\n  getColumnByID(colId: string) {\n    let column;\n    let colIndex = this.configOptions.allColumns.findIndex(\n      (x) => x.id === colId\n    );\n    if (colIndex > -1) {\n      column = this.configOptions.allColumns[colIndex];\n    }\n    return column;\n  }\n\n  openSnackBar(message: string) {\n    this._snackBar.open(message, '', {\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n      duration: 5000 // 5 milliseconds\n    });\n  }\n\n  toggleColumnVisibility(\n    isVisible: boolean,\n    colId: string,\n    externalTrigger?: boolean | false\n  ) {\n    this.visibleColumns = this.configOptions.allColumns.filter(\n      (column) => column['visible']\n    );\n    if (!isVisible && this.visibleColumns.length == 1) {\n      this.openSnackBar(\n        'Please make sure to have aleast one column in the report!'\n      );\n      return;\n    }\n\n    let groupedColIds: string[] = this.configOptions.groupByColumns;\n    let groupIndex = groupedColIds.indexOf(colId);\n    if (groupIndex > -1 && !isVisible) {\n      let column = this.getColumnByID(colId);\n      if (column) {\n        this.removeGroup(column);\n      }\n    }\n\n    this.configOptions.allColumns.forEach((col) => {\n      if (col['id'] === colId) {\n        col['visible'] = isVisible;\n      }\n    });\n\n    this.reOrderColumns(colId, 'end');\n    this.setColumnsToDisplay();\n    this.onConfigOptionsChange.emit({\n      eventType: Constants.REFRESH_CONFIG,\n      data: this.configOptions\n    });\n    if (!externalTrigger) {\n      let _eventName = isVisible\n        ? Constants.ADD_COLUMN\n        : Constants.REMOVE_COLUMN;\n      this.onConfigOptionsChange.emit({\n        eventType: Constants.WRITE_TO_UNDO_REDO,\n        eventName: _eventName,\n        data: colId\n      });\n    }\n  }\n\n  hideColumn(columnId: string) {\n    this.toggleColumnVisibility(false, columnId);\n  }\n  showColumn(event: Event, column: any) {\n    event.stopPropagation();\n    this.toggleColumnVisibility(true, column.id);\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    let _columnsToDisplay = this.columnsToDisplay;\n    if (this.configOptions.enableRowsSelection) {\n      this.columnsToDisplay.splice(0, 1);\n      _columnsToDisplay = this.columnsToDisplay;\n      moveItemInArray(\n        _columnsToDisplay,\n        event.previousIndex,\n        event.currentIndex\n      );\n      this.columnsToDisplay = ['selected', ..._columnsToDisplay];\n    } else {\n      moveItemInArray(\n        _columnsToDisplay,\n        event.previousIndex,\n        event.currentIndex\n      );\n      this.columnsToDisplay = [..._columnsToDisplay];\n    }\n  }\n\n  reOrderColumns(\n    columnName: string,\n    movePosition: string | 'left' | 'right' | 'end' | 'index' | 'original'\n  ) {\n    let prevIndex = this.configOptions.allColumns.findIndex(\n      (x) => x.id === columnName\n    );\n    let newIndex;\n    if (movePosition === 'left') {\n      newIndex = prevIndex - 1;\n    } else if (movePosition === 'right') {\n      newIndex = prevIndex + 1;\n    } else if (movePosition === 'index') {\n      newIndex = this.configOptions.groupByColumns.length - 1;\n    } else if (movePosition === 'original') {\n      const index = this.configOptions.allColumns.findIndex(\n        (col) => col.id === columnName\n      );\n      if (index > -1) {\n        newIndex =\n          this.configOptions.allColumns[index].originalOrder ||\n          this.configOptions.allColumns.length;\n        newIndex = newIndex - 1;\n      } else {\n        newIndex = this.configOptions.allColumns.length;\n      }\n    } else {\n      newIndex = this.configOptions.allColumns.length;\n    }\n    moveItemInArray(this.configOptions.allColumns, prevIndex, newIndex);\n    this.configOptions.allColumns.forEach((column: any, index: number) => {\n      column.order = index + 1;\n    });\n    this.repaintTable();\n  }\n\n  moveLeft(columnName: string) {\n    let _columnsToDisplay = this.columnsToDisplay;\n    if (this.configOptions.enableRowsSelection) {\n      this.columnsToDisplay.splice(0, 1);\n      _columnsToDisplay = this.columnsToDisplay;\n      let prevIndex = _columnsToDisplay.indexOf(columnName);\n      let currentIndex = prevIndex - 1;\n      moveItemInArray(_columnsToDisplay, prevIndex, currentIndex);\n      this.reOrderColumns(columnName, 'left');\n      this.columnsToDisplay = ['selected', ..._columnsToDisplay];\n    } else {\n      let prevIndex = _columnsToDisplay.indexOf(columnName);\n      let currentIndex = prevIndex - 1;\n      moveItemInArray(_columnsToDisplay, prevIndex, currentIndex);\n      this.reOrderColumns(columnName, 'left');\n      this.columnsToDisplay = [..._columnsToDisplay];\n    }\n  }\n\n  moveRight(columnName: string) {\n    let _columnsToDisplay = this.columnsToDisplay;\n    if (this.configOptions.enableRowsSelection) {\n      this.columnsToDisplay.splice(0, 1);\n      _columnsToDisplay = this.columnsToDisplay;\n      let prevIndex = _columnsToDisplay.indexOf(columnName);\n      let currentIndex = prevIndex + 1;\n      moveItemInArray(_columnsToDisplay, prevIndex, currentIndex);\n      this.reOrderColumns(columnName, 'right');\n      this.columnsToDisplay = ['selected', ..._columnsToDisplay];\n    } else {\n      let prevIndex = _columnsToDisplay.indexOf(columnName);\n      let currentIndex = prevIndex + 1;\n      moveItemInArray(_columnsToDisplay, prevIndex, currentIndex);\n      this.reOrderColumns(columnName, 'right');\n      this.columnsToDisplay = [..._columnsToDisplay];\n    }\n  }\n\n  isSticky(stickyColumns: string[], id: string) {\n    return stickyColumns.indexOf(id) !== -1;\n  }\n  isStickyEnd(stickyEndColumns: string[], id: string) {\n    return stickyEndColumns.indexOf(id) !== -1;\n  }\n\n  stick(columnName: string) {\n    if (!this.stickyColumns.includes(columnName)) {\n      this.stickyColumns.push(columnName);\n    }\n    this.configOptions.allColumns.forEach((column: any) => {\n      if (column.id === columnName) {\n        column.sticky = true;\n      }\n    });\n  }\n\n  stickToEnd(columnName: string) {\n    this.stickyEndColumns.push(columnName);\n  }\n\n  unstick(columnName: string) {\n    this.stickyColumns = this.stickyColumns.filter((col) => col !== columnName);\n    this.configOptions.allColumns.forEach((column: any) => {\n      if (columnName === column.id) {\n        column.sticky = false;\n      }\n    });\n  }\n  unstickEnd(columnName: string) {\n    const index = this.stickyEndColumns.indexOf(columnName);\n    if (index > -1) {\n      this.stickyEndColumns.splice(index, 1);\n    }\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n\n      this.rowLevelActionHandler.emit({\n        action: 'toggleAllRows',\n        data: false\n      });\n      return;\n    }\n    this.rowLevelActionHandler.emit({\n      action: 'toggleAllRows',\n      data: true\n    });\n    this.selection.select(...this.dataSource.data);\n  }\n\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${\n      row.position + 1\n    }`;\n  }\n\n  toggleRowSelect(row: any) {\n    if (row) {\n      this.selection.toggle(row);\n      this.rowLevelActionHandler.emit({\n        action: 'toggleRowSelect',\n        data: row\n      });\n    }\n  }\n\n  onCellClick(row: any, columnId: any, controlType: any, element = null) {\n    if (controlType !== 'menu') {\n      if (!element)\n        this.cellClickActionHandler.emit({\n          row,\n          columnId,\n          scrollTop: this.scrollTop ? this.scrollTop : 0\n        });\n      else\n        this.cellClickActionHandler.emit({\n          row,\n          columnId,\n          element,\n          scrollTop: this.scrollTop ? this.scrollTop : 0\n        });\n    }\n  }\n\n  onMenuButtonClick(row: any, columnId: any, option: any) {\n    this.cellClickActionHandler.emit({\n      row,\n      columnId,\n      option\n    });\n  }\n\n  resetTableScroll() {\n    if (!this.dataSource.data.length) {\n      this.configOptions.tableHeight = '60px';\n    }\n\n    // commented this line of code to not to scroll to top directly\n    // const element = document.getElementById('matTableMain');\n    // if (element) {\n    //   element.scrollTop = 0;\n    // }\n  }\n  repaintTable() {\n    this.groupAndSort(this.dataSource.data);\n\n    this.spans = [];\n    this.configOptions.groupByColumns.forEach((col: string, index: number) => {\n      this.cacheSpan(col, index);\n    });\n    this.changeDetectorRefs.detectChanges();\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    if (this.configOptions?.defaultSortColumn) {\n      this.sort.active = this.configOptions.defaultSortColumn;\n      this.sort.direction = this.configOptions?.defaultSortDirection\n        ? this.configOptions.defaultSortDirection\n        : 'asc';\n    }\n    this.dataSource.sort = this.sort;\n    this.resetTableScroll();\n    this.repaintTable();\n  }\n\n  evaluateCondition(rowData: any, item: any = { condition: true }) {\n    if (item.condition === true || item.condition === false)\n      return item.condition;\n\n    const { operation, operand, fieldName, dependentFieldName } =\n      item.condition;\n\n    const fieldValue = rowData[fieldName];\n\n    const dependentFieldValue = dependentFieldName\n      ? rowData[dependentFieldName]\n      : true;\n\n    if (dependentFieldValue === false) return;\n\n    switch (operation) {\n      case '=':\n        return fieldValue === operand;\n      case '!=':\n        return fieldValue !== operand;\n      case '>':\n        return fieldValue > operand;\n      case '<':\n        return fieldValue < operand;\n      case '>=':\n        return fieldValue >= operand;\n      case '<=':\n        return fieldValue <= operand;\n      case 'contains':\n        return fieldValue\n          .toString()\n          .toLowerCase()\n          .includes(operand.toString().toLowerCase());\n      case 'notContains':\n        return !fieldValue\n          .toString()\n          .toLowerCase()\n          .includes(operand.toString().toLowerCase());\n      case 'startsWith':\n        return fieldValue\n          .toString()\n          .toLowerCase()\n          .startsWith(operand.toString().toLowerCase());\n      case 'endsWith':\n        return fieldValue\n          .toString()\n          .toLowerCase()\n          .endsWith(operand.toString().toLowerCase());\n      case 'in':\n        return operand.includes(fieldValue);\n      case 'notIn':\n        return !operand.includes(fieldValue);\n      case 'isNull':\n        return fieldValue === null;\n      case 'isNotNull':\n        return fieldValue !== null;\n      case 'isEmpty':\n        return fieldValue === '';\n      case 'isNotEmpty':\n        return fieldValue !== '';\n      case 'isTrue':\n        return fieldValue === true;\n      case 'isFalse':\n        return fieldValue === false;\n      case 'isTruthy':\n        return !!fieldValue;\n      case 'isFalsy':\n        return !fieldValue;\n      case 'isToday':\n      // todo\n      case 'isThisWeek':\n      //todo\n      case 'isThisMonth':\n      //todo\n    }\n  }\n\n  getConditionalStyles(existingStyles: any, rowData: any, column: Column) {\n    let styles = { ...existingStyles };\n    if (column.hasConditionalStyles) {\n      const conditionalStyles = this.configOptions.conditionalStyles;\n      let value = rowData[column.id];\n      if (value) {\n        value = value.toLowerCase();\n      }\n      const style = conditionalStyles[value];\n      styles = { ...styles, ...style };\n    }\n\n    if(column?.hasMatToolTip){\n      \n\n     const style=  { 'white-space': 'nowrap', 'display':'block', 'overflow': 'hidden','text-overflow':'ellipsis','max-width':'160px' }\n     styles={...styles,...style}\n\n    }\n    if (\n      rowData[column.id + '_styles'] &&\n      typeof rowData[column.id + '_styles'] === 'object'\n    ) {\n      styles = { ...styles, ...rowData[column.id + '_styles'] };\n    }\n    return styles;\n  }\n\n  evaluateExpression(rowData: any, column: Column) {\n    let styles = {};\n\n    let groupedColumns: string[] = this.configOptions.groupByColumns;\n    let index = groupedColumns.indexOf(column.id);\n    if (index > -1) {\n      styles = {\n        ...styles,\n        background: this.configOptions.groupLevelColors[index]\n          ? this.configOptions.groupLevelColors[index]\n          : ''\n      };\n    }\n    column.operations?.forEach((op) => {\n      switch (op.operation) {\n        case 'gt':\n          if (rowData[column.id] > op.value) {\n            styles = { ...styles, ...op.styles };\n          }\n          break;\n        case 'lt':\n          if (rowData[column.id] < op.value) {\n            styles = { ...styles, ...op.styles };\n          }\n          break;\n        case 'equal':\n          if (rowData[column.id] === op.value) {\n            styles = { ...styles, ...op.styles };\n          }\n          break;\n      }\n    });\n    return styles;\n  }\n\n  getDisplayValues(value: string, separator = ',') {\n    return value ? value.split(separator) : [];\n  }\n\n  getDisplayType(element: any, column: any, value: any) {\n    const status = element[column.controlValue?.dependentFieldId];\n    if (value?.dependentFieldValues?.length) {\n      if (value?.dependentFieldValues.includes(status?.toLowerCase()))\n        value.displayType = 'dropdown';\n      else value.displayType = 'text';\n    }\n\n    return value.displayType;\n  }\n\n  onToggleChange(event: any) {\n    this.onToggleChangeHandler.emit(event.checked);\n  }\n  scrollToTop() {\n    const element = document.getElementById('matTableMain');\n    if (element) {\n      element.scrollTop = 0;\n    }\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.scrollSubscription.unsubscribe();\n  }\n  resetSelection() {\n    this.selection = new SelectionModel<any>(true, this.selectedRows);\n  }\n\n  // sortDataSource(idVal: string, startVal?: 'asc' | 'desc'): void {\n  //   this.dataSource.sort?.sort(<MatSortable>({ id: idVal, start: startVal}));\n  // }\n\n  onValChange(element: any, val: any) {\n    this.onSelectButtonToggle.emit({ element, val });\n  }\n}\n","<div>\n  <div class=\"leftPanel\" *ngIf=\"configOptions.displayFilterPanel\">\n    <cwp-table-filter-panel\n      [configOptions]=\"configOptions\"\n      (eventsHandler)=\"handleEvent($event)\"\n    ></cwp-table-filter-panel>\n  </div>\n  <div\n    [ngClass]=\"\n      configOptions.displayFilterPanel ? 'tableMainContent' : 'tableFullWidth'\n    \"\n  >\n    <div class=\"tableMain\" id=\"tableMain\" (scroll)=\"onTableScroll($event)\">\n      <table\n        id=\"matTableMain\"\n        mat-table\n        class=\"mat-elevation-z0 dynamictable\"\n        [dataSource]=\"dataSource\"\n        matSort\n        multiTemplateDataRows\n        cdkDropList\n        [ngStyle]=\"{\n          width: configOptions.tableWidth,\n          'max-height': configOptions.tableHeight\n        }\"\n        cdkDropListOrientation=\"horizontal\"\n        (cdkDropListDropped)=\"drop($event)\"\n        (scroll)=\"onTableScroll($event)\"\n      >\n        <!-- Checkbox Column -->\n        <ng-container\n          matColumnDef=\"selected\"\n          *ngIf=\"configOptions.enableRowsSelection\"\n        >\n          <th mat-header-cell *matHeaderCellDef class=\"w-50 rowselect-checkbox\">\n            <mat-checkbox\n              (change)=\"$event ? masterToggle() : null\"\n              [checked]=\"selection.hasValue() && isAllSelected()\"\n              [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n              [aria-label]=\"checkboxLabel()\"\n            >\n            </mat-checkbox>\n          </th>\n          <td mat-cell *matCellDef=\"let row\" class=\"w-50\">\n            <mat-checkbox\n              [disabled]=\"\n                configOptions.enableRowsSelection &&\n                !evaluateCondition(row, configOptions.enableRowLevelActions)\n              \"\n              (click)=\"$event.stopPropagation()\"\n              (change)=\"$event ? toggleRowSelect(row) : null\"\n              [checked]=\"\n                configOptions.enableRowsSelection &&\n                evaluateCondition(row, configOptions.enableRowLevelActions) &&\n                selection.isSelected(row)\n              \"\n              [aria-label]=\"checkboxLabel(row)\"\n            >\n            </mat-checkbox>\n          </td>\n        </ng-container>\n        <!-- Other Dynamic Columns -->\n        <ng-container\n          [matColumnDef]=\"column.id\"\n          [sticky]=\"isSticky(stickyColumns, column.id)\"\n          [stickyEnd]=\"isStickyEnd(stickyEndColumns, column.id)\"\n          *ngFor=\"let column of displayedColumns\"\n        >\n          <th\n            mat-header-cell\n            cdkDrag\n            [cdkDragDisabled]=\"!column.movable\"\n            *matHeaderCellDef\n            class=\"tableHeaderCell table-column\"\n            [disableClear]=\"true\"\n            mat-sort-header\n            [disabled]=\"!column.sortable\"\n          >\n            <!-- <th mat-header-cell cdkDrag [cdkDragDisabled]=\"column.disabled\" *matHeaderCellDef class=\"tableHeaderCell\"> -->\n            <div class=\"headerCell\">\n              <div id=\"dynamictableHeadCellName\" class=\"headerCellLabel\">\n                {{ column.displayName }}\n                <span *ngIf=\"column.sortable === true\">\n                  <span\n                    id=\"dynamictableSortAsc\"\n                    *ngIf=\"\n                      sort &&\n                      sort.active === column.id &&\n                      sort.direction == 'asc'\n                    \"\n                  >\n                    &#8593;\n                  </span>\n                  <span\n                    id=\"dynamictableSortDesc\"\n                    *ngIf=\"\n                      sort &&\n                      sort.active === column.id &&\n                      sort.direction == 'desc'\n                    \"\n                  >\n                    &#8595;\n                  </span>\n                  <span *ngIf=\"sort && sort.active !== column.id\">&#8645;</span>\n                </span>\n              </div>\n              <div class=\"headerCellActions\" (click)=\"$event.stopPropagation()\">\n                <button\n                  id=\"dynamictableMoreOption\"\n                  type=\"button\"\n                  mat-icon-button\n                  [matMenuTriggerFor]=\"menu\"\n                  *ngIf=\"column.showMenuOptions\"\n                  aria-label=\"icon-button with a menu\"\n                  (click)=\"$event.stopPropagation()\"\n                  aria-label=\"More Options\"\n                >\n                  <mat-icon>more_horiz</mat-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n                  <button\n                    id=\"dynamictableHideCol\"\n                    type=\"button\"\n                    mat-menu-item\n                    (click)=\"hideColumn(column.id)\"\n                    *ngIf=\"column.hideable\"\n                  >\n                    Hide Column\n                  </button>\n                  <button\n                    id=\"dynamictableMoveLeft\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"column.movable\"\n                    (click)=\"moveLeft(column.id)\"\n                  >\n                    Move Left\n                  </button>\n                  <button\n                    id=\"dynamictableMoveRight\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"column.movable\"\n                    (click)=\"moveRight(column.id)\"\n                  >\n                    Move Right\n                  </button>\n                  <button\n                    id=\"dynamictableStick\"\n                    type=\"button\"\n                    mat-menu-item\n                    (click)=\"stick(column.id)\"\n                    *ngIf=\"\n                      !isSticky(stickyColumns, column.id) && column.stickable\n                    \"\n                  >\n                    Stick\n                  </button>\n                  <!-- <button\n                    mat-menu-item\n                    (click)=\"stickToEnd(column.id)\"\n                    *ngIf=\"!isStickyEnd(stickyColumns, column.id)\"\n                  >\n                    Stick to End\n                  </button> -->\n                  <button\n                    id=\"dynamictableColStickable\"\n                    type=\"button\"\n                    mat-menu-item\n                    (click)=\"unstick(column.id)\"\n                    *ngIf=\"\n                      (isSticky(stickyColumns, column.id) ||\n                        isStickyEnd(stickyEndColumns, column.id)) &&\n                      column.stickable\n                    \"\n                  >\n                    Un-stick\n                  </button>\n                  <button\n                    id=\"dynamictableAddGroup\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"\n                      column.visible &&\n                      column.groupable &&\n                      !isGrouped(column.id)\n                    \"\n                    [disabled]=\"this.configOptions.groupByColumns.length >= 3\"\n                    (click)=\"addGroup(column, $event)\"\n                  >\n                    Group Rows by this Column\n                  </button>\n                  <button\n                    id=\"dynamictableRemoveGroup\"\n                    type=\"button\"\n                    mat-menu-item\n                    *ngIf=\"\n                      column.visible && column.groupable && isGrouped(column.id)\n                    \"\n                    (click)=\"removeGroup(column, $event)\"\n                  >\n                    Un-group this Column\n                  </button>\n                </mat-menu>\n              </div>\n            </div>\n          </th>\n          <!-- <td _ngcontent-pqd-c296=\"\" role=\"cell\" mat-cell=\"\" class=\"mat-cell cdk-cell cdk-column-name mat-column-name ng-tns-c296-0 ng-star-inserted\">\n            </td>\n         -->\n          <td\n            mat-cell\n            *matCellDef=\"let element; let i = dataIndex\"\n            [ngStyle]=\"evaluateExpression(element, column)\"\n            [attr.rowspan]=\"getRowSpan(column.id, i)\"\n            [style.display]=\"getRowSpan(column.id, i) ? '' : 'none'\"\n            class=\"table-column\"\n            (click)=\"onCellClick(element, column.id, column.controlType)\"\n            id=\"{{ column.id }}\"\n          >\n            <div\n              class=\"displayFlex\"\n              *ngIf=\"column && element\"\n              [ngClass]=\"{\n                disabled:\n                  element[column.controlValue?.dependentFieldId] === true &&\n                  column.controlValue.disableBackground === true,\n                'not-disabled':\n                  element[column.controlValue?.dependentFieldId] === false &&\n                  column.controlValue.disableBackground === true\n              }\"\n            >\n              <!-- <span\n                *ngIf=\"\n                  column.hasPreTextImage &&\n                  element.preTextImageConfig &&\n                  element.preTextImageConfig.logoAvialable === false\n                \"\n                [ngStyle]=\"element.preTextImageConfig.style\"\n              >\n                <avatar [text]=\"element.name\"></avatar>\n              </span> -->\n\n              <img\n                id=\"dynamictableImg\"\n                [src]=\"element.preTextImage.image\"\n                [ngStyle]=\"element.preTextImage.style\"\n                *ngIf=\"\n                  column.hasPreTextImage &&\n                  element.preTextImage &&\n                  element.preTextImage.image &&\n                  element.preTextImage.condition &&\n                  evaluateCondition(element, element.preTextImage)\n                \"\n                alt=\"Pre Image\"\n              />\n              <span\n                *ngIf=\"column.controlType === 'string'\"\n                [ngClass]=\"column?.hasMatToolTip ? 'mat-tooltip-parent' : ''\"\n              >\n                <span\n                  id=\"dynamictableColType\"\n                  *ngIf=\"!isArray(element[column.id])\"\n                  [ngStyle]=\"\n                    getConditionalStyles(column.titleStyle, element, column)\n                  \"\n                  (click)=\"onCellClick(element, column.id, column.controlType)\"\n                  #tooltip=\"matTooltip\"\n                  matTooltip=\"{{ element[column.id] }}\"\n                  matTooltipPosition=\"above\"\n                  [matTooltipDisabled]=\"!column.hasMatToolTip\"\n                >\n                  {{ element[column.id] | dynamicTypePipe : column.type }}\n                  <span\n                    *ngIf=\"column.hasRightElement\"\n                    id=\"dynamictableRightElement\"\n                    [innerHTML]=\"element.rightElement\"\n                  >\n                  </span>\n                </span>\n                <span\n                  *ngIf=\"isArray(element[column.id])\"\n                  [ngStyle]=\"column.titleStyle\"\n                >\n                  <span\n                    id=\"dynamictableItem\"\n                    *ngFor=\"let item of element[column.id]; last as isLast\"\n                    (click)=\"onCellClick(element, column.id, item)\"\n                  >\n                    {{ item }}<span *ngIf=\"!isLast\">, </span></span\n                  > </span\n                ><br />\n                <span\n                  id=\"dynamictableSubtitle\"\n                  *ngIf=\"column.hasSubtitle\"\n                  [ngStyle]=\"\n                    element[column.subtitleColumn] !== ''\n                      ? column.subtitleStyle\n                      : ''\n                  \"\n                >\n                  {{\n                    element[column.subtitleColumn]\n                      | dynamicTypePipe : column.type\n                  }}\n                </span>\n                <span\n                  *ngIf=\"column.hasBelowElement\"\n                  id=\"dynamictableSubtitleElement\"\n                >\n                  <br />\n                  <span [innerHTML]=\"element.belowElement\"></span>\n                </span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'slide-toggle'\">\n                <span class=\"slide-toggle\">\n                  <mat-slide-toggle\n                    [checked]=\"element[column.id]\"\n                    (change)=\"onToggleChange($event)\"\n                  ></mat-slide-toggle>\n                </span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'html'\">\n                <span [innerHTML]=\"element[column.id]\"></span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'button'\" class=\"button-span\">\n                <button\n                  id=\"dynamictableColValue\"\n                  type=\"button\"\n                  mat-stroked-button\n                  class=\"table-buttons\"\n                  *ngIf=\"!element[column.id]; else freeText\"\n                >\n                  {{ column.controlValue }}\n                </button>\n                <ng-template #freeText>\n                  <span id=\"dynamictableColId\">\n                    {{ element[column.id] }}\n                  </span>\n                </ng-template>\n              </span>\n\n              <span\n                *ngIf=\"column.controlType === 'button-toggle'\"\n                class=\"mat-button-span\"\n              >\n                <span\n                  *ngIf=\"column?.controlValue.length && !element[column.id]\"\n                >\n                  <ng-container *ngFor=\"let button of column?.controlValue\">\n                    <mat-button-toggle-group\n                      #group=\"matButtonToggleGroup\"\n                      (change)=\"onValChange(element, group.value)\"\n                    >\n                      <mat-button-toggle\n                        [value]=\"button.value\"\n                        class=\"{{ button.class }}\"\n                      >\n                        <mat-icon *ngIf=\"button.isIcon\">\n                          {{ button.iconName }}\n                        </mat-icon>\n                      </mat-button-toggle>\n                    </mat-button-toggle-group>\n                  </ng-container>\n                </span>\n                <span id=\"dynamictableColId\" *ngIf=\"element[column.id]\">\n                  {{ element[column.id] }}\n                </span>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'menu'\" class=\"button-span\">\n                <button\n                  mat-stroked-button\n                  class=\"table-buttons\"\n                  [matMenuTriggerFor]=\"menu\"\n                  *ngIf=\"!element[column.id]; else freeText\"\n                >\n                  {{ column.controlValue['buttonName'] }}\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                  <ng-template matMenuContent>\n                    <button\n                      mat-menu-item\n                      (click)=\"onMenuButtonClick(element, column.id, btn)\"\n                      *ngFor=\"let btn of column.controlValue['menuButtonNames']\"\n                      class=\"mat-menu-button\"\n                    >\n                      {{ btn }}\n                    </button>\n                  </ng-template>\n                </mat-menu>\n                <ng-template #freeText>\n                  <span>\n                    {{ element[column.id] }}\n                  </span>\n                </ng-template>\n              </span>\n\n              <span *ngIf=\"column.controlType === 'space-between'\">\n                <span class=\"space-between\" [ngStyle]=\"column.titleStyle\">\n                  <div\n                    *ngFor=\"\n                      let value of getDisplayValues(\n                        element[column.id],\n                        column.controlValue\n                      )\n                    \"\n                  >\n                    {{ value }}\n                  </div>\n                </span>\n              </span>\n\n              <span\n                *ngIf=\"column.controlType === 'dropdown'\"\n                [id]=\"element.id\"\n                class=\"width-100\"\n              >\n                <span\n                  class=\"dropdown\"\n                  *ngIf=\"\n                    getDisplayType(element, column, column.controlValue) ===\n                    'dropdown'\n                  \"\n                >\n                  <span\n                    id=\"dynamictableDropDown\"\n                    *ngIf=\"element[column.id] !== undefined\"\n                    class=\"dropdown-value\"\n                  >\n                    {{ element[column.id] }}\n                  </span>\n                  <span\n                    id=\"dynamictableSelect\"\n                    *ngIf=\"element[column.id] === undefined\"\n                    class=\"select-text\"\n                  >\n                    Select\n                  </span>\n                  <span class=\"arrow\">\n                    <mat-icon>arrow_drop_down</mat-icon>\n                  </span>\n                </span>\n                <span\n                  id=\"dynamictableText\"\n                  *ngIf=\"\n                    getDisplayType(element, column, column.controlValue) ===\n                    'text'\n                  \"\n                >\n                  {{ element[column.id] }}\n                </span>\n              </span>\n\n              <!-- <span\n                *ngIf=\"\n                  column.hasPostTextImage &&\n                  element.postTextImageConfig &&\n                  element.postTextImageConfig.logoAvialable === false\n                \"\n                [ngStyle]=\"element.postTextImageConfig.style\"\n              >\n                <avatar [text]=\"element.name\"></avatar>\n              </span> -->\n\n              <img\n                [src]=\"element.postTextImage.image\"\n                [ngStyle]=\"element.postTextImage.style\"\n                *ngIf=\"\n                  column.hasPostTextImage &&\n                  element.postTextImage &&\n                  element.postTextImage.image &&\n                  element.postTextImage.condition &&\n                  evaluateCondition(element, element.postTextImage)\n                \"\n                alt=\"Post Image\"\n              />\n            </div>\n          </td>\n        </ng-container>\n        <ng-container\n          matColumnDef=\"actions\"\n          [stickyEnd]=\"true\"\n          *ngIf=\"configOptions.displayActionsColumn\"\n        >\n          <th\n            id=\"dynamictableAction\"\n            mat-header-cell\n            *matHeaderCellDef\n            class=\"w-50 actions-column tableHeaderCell table-column\"\n          >\n            Actions\n          </th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"action-icons-display-flex\">\n              <ng-container\n                *ngIf=\"configOptions.rowLevelActions.iconAction; let iconAction\"\n              >\n                <button\n                  id=\"dynamictableRowLevelAction\"\n                  type=\"button\"\n                  mat-icon-button\n                  class=\"more-actions\"\n                  (click)=\"onRowLevelActionIconClick(iconAction, row)\"\n                  aria-label=\"Row Level Action\"\n                >\n                  <mat-icon\n                    id=\"dynamictableIconToggleOn\"\n                    *ngIf=\"row[iconAction.property]\"\n                    [ngStyle]=\"iconAction.styleToggleOn\"\n                    (click)=\"onRowLevelActionIconClick(iconAction, row)\"\n                    class=\"action-icons\"\n                    >{{ iconAction.iconToggleOn }}\n                  </mat-icon>\n                  <mat-icon\n                    id=\"dynamictableToggleOff\"\n                    *ngIf=\"!row[iconAction.property]\"\n                    [ngStyle]=\"iconAction.styleToggleOff\"\n                    (click)=\"onRowLevelActionIconClick(iconAction, row)\"\n                    class=\"action-icons\"\n                    >{{ iconAction.iconToggleOff }}</mat-icon\n                  >\n                </button>\n              </ng-container>\n              <button\n                id=\"dynamictableActionMenu\"\n                type=\"button\"\n                mat-icon-button\n                [matMenuTriggerFor]=\"actionsMenu\"\n                class=\"more-actions\"\n                [disabled]=\"\n                  !evaluateCondition(row, configOptions.enableRowLevelActions)\n                \"\n                aria-label=\"More Options\"\n              >\n                <mat-icon id=\"dynamictableMoreIcon\">more_horiz</mat-icon>\n              </button>\n              <mat-menu #actionsMenu=\"matMenu\">\n                <ng-container\n                  *ngFor=\"\n                    let action of configOptions.rowLevelActions.menuActions\n                  \"\n                >\n                  <ng-container *ngIf=\"action.type !== 'menu'\">\n                    <button\n                      id=\"dynamictableActionClick\"\n                      type=\"button\"\n                      mat-menu-item\n                      *ngIf=\"\n                        !action.condition ||\n                        (action.condition && evaluateCondition(row, action))\n                      \"\n                      (click)=\"onRowLevelActionClick(action, row)\"\n                    >\n                      <mat-icon\n                        id=\"dynamictableActionIcon\"\n                        class=\"action-icons\"\n                        [ngClass]=\"{\n                          'red-text':\n                            action.title === 'Delete' ||\n                            action.title === 'Deactivate' ||\n                            action.title === 'Archive'\n                        }\"\n                        *ngIf=\"action.icon\"\n                        >{{ action.icon }}</mat-icon\n                      >\n                      <span\n                        id=\"dynamictableActionTitle\"\n                        [ngClass]=\"{\n                          'red-text':\n                            action.title === 'Delete' ||\n                            action.title === 'Deactivate' ||\n                            action.title === 'Archive'\n                        }\"\n                        >{{ action.title }}</span\n                      >\n                    </button>\n                  </ng-container>\n                  <ng-container *ngIf=\"action.type === 'menu'\">\n                    <button\n                      id=\"dynamictableActionClick\"\n                      type=\"button\"\n                      mat-menu-item\n                      [matMenuTriggerFor]=\"nestedMenu\"\n                      *ngIf=\"\n                        !action.condition ||\n                        (action.condition && evaluateCondition(row, action))\n                      \"\n                    >\n                      <span id=\"dynamictableActionTitle\">{{\n                        action.title\n                      }}</span>\n                    </button>\n                    <mat-menu #nestedMenu=\"matMenu\">\n                      <button\n                        mat-menu-item\n                        *ngFor=\"let subMenu of action.menuValues\"\n                        (click)=\"onRowLevelActionClick(action, row, subMenu)\"\n                      >\n                        {{ subMenu }}\n                      </button>\n                    </mat-menu>\n                  </ng-container>\n                </ng-container>\n              </mat-menu>\n            </div>\n          </td>\n        </ng-container>\n        <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n        <ng-container matColumnDef=\"expandedDetail\">\n          <td\n            mat-cell\n            *matCellDef=\"let element\"\n            [attr.colspan]=\"columnsToDisplay.length\"\n          >\n            <div\n              class=\"example-element-detail\"\n              [@detailExpand]=\"\n                element == expandedElement ? 'expanded' : 'collapsed'\n              \"\n            >\n              <div class=\"example-element-diagram\">\n                <div\n                  id=\"dynamictableElementName\"\n                  class=\"example-element-position\"\n                >\n                  {{ element.name }}\n                </div>\n                <div\n                  id=\"dynamictableElementProgress\"\n                  class=\"example-element-symbol\"\n                >\n                  {{ element.progress }}\n                </div>\n                <div\n                  id=\"dynamictableElementExample\"\n                  class=\"example-element-name\"\n                >\n                  {{ element.fruit }}\n                </div>\n                <div id=\"dynamictableElementId\" class=\"example-element-weight\">\n                  {{ element.id }}\n                </div>\n              </div>\n              <div\n                id=\"dynamictableElementDesc\"\n                class=\"example-element-description\"\n              >\n                {{ element.name }}\n                <span class=\"example-element-description-attribution\">\n                  -- Wikipedia\n                </span>\n              </div>\n            </div>\n          </td>\n        </ng-container>\n        <tr\n          mat-header-row\n          *matHeaderRowDef=\"columnsToDisplay; sticky: true\"\n          class=\"headerRow\"\n        ></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let row; columns: columnsToDisplay\"\n          [class.example-expanded-row]=\"expandedElement === row\"\n          (click)=\"\n            expandedElement = expandedElement === row ? null : row;\n            highlight(row)\n          \"\n          [ngClass]=\"{ highlight: selectedRowIndex == row?.id }\"\n        ></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let row; columns: ['expandedDetail']; when: customWhen\"\n          class=\"example-detail-row\"\n        ></tr>\n      </table>\n      <div *ngIf=\"!dataSource.data.length\" class=\"noResultsContainer\">\n        <span id=\"dynamictableNoDataFound\" class=\"noSearchResultsText\">\n          {{\n            configOptions?.noDataText\n              ? configOptions?.noDataText\n              : 'No Data Found'\n          }}\n        </span>\n      </div>\n    </div>\n    <mat-paginator\n      *ngIf=\"configOptions.enablePagination\"\n      [pageSizeOptions]=\"[10, 25, 50, 75, 100]\"\n      aria-label=\"Select Page\"\n    ></mat-paginator>\n  </div>\n</div>\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {ClipboardModule} from '@angular/cdk/clipboard';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {OverlayModule} from '@angular/cdk/overlay';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkAccordionModule,\n    ClipboardModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class SharedMaterialModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'avatar',\n  template: ` <span class=\"avatar\">{{ getText() }}</span> `,\n  styles: [\n    `\n      .avatar {\n        width: 40px;\n        height: 40px;\n        background: #cacaca;\n        border-radius: 5px;\n        display: inline-grid;\n        text-align: center;\n        align-items: center;\n        color: #88888a;\n        font-size: 150%;\n        font-weight: 500;\n      }\n    `\n  ]\n})\nexport class AvatarComponent {\n  @Input() text: string;\n\n  ngOnInit() {}\n\n  public getText() {\n    if (!this.text) {\n      return;\n    }\n    let matches = this.text.charAt(0);\n    return matches.toUpperCase();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DynamictableComponent } from './dynamictable.component';\nimport { SharedMaterialModule } from './shared-material-module';\nimport { FormsModule } from '@angular/forms';\nimport { TableFilterPanelComponent } from './table-filter-panel/table-filter-panel.component';\nimport { DynamictableFilterService } from './dynamictable.service';\nimport { DynamicTypePipe } from './dynamic-type-pipe/dynamic-type-pipe';\nimport { AvatarComponent } from './avatar.component';\nimport { TimeAgoPipe } from './time-ago-type-pipe/time-ago.pipe';\n\n@NgModule({\n  declarations: [\n    DynamictableComponent,\n    TableFilterPanelComponent,\n    DynamicTypePipe,\n    AvatarComponent,\n    TimeAgoPipe\n  ],\n  imports: [CommonModule, FormsModule, SharedMaterialModule],\n  exports: [DynamictableComponent, TableFilterPanelComponent],\n  providers: [DynamictableFilterService, TimeAgoPipe]\n})\nexport class DynamictableModule {}\n","/*\n * Public API Surface of dynamictable\n */\n\nexport * from './lib/dynamictable.component';\nexport * from './lib/dynamictable.service';\nexport * from './lib/table-filter-panel/table-filter-panel.component';\nexport * from './lib/dynamictable.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}